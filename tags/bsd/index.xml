<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BSD on JWillikers</title>
    <link>https://jwillikers.com/tags/bsd/</link>
    <description>Recent content in BSD on JWillikers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>jordan@jwillikers.com (Jordan Williams)</managingEditor>
    <webMaster>jordan@jwillikers.com (Jordan Williams)</webMaster>
    <copyright>Jordan Williams
&lt;br /&gt;
&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;
&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34;
  src=&#34;https://i.creativecommons.org/l/by-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;span xmlns:dct=&#34;http://purl.org/dc/terms/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34;
  property=&#34;dct:title&#34; rel=&#34;dct:type&#34;&gt;JWillikers&lt;/span&gt; by 
  &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;https://jwillikers.com&#34;
  property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Jordan Williams&lt;/a&gt;
  is licensed under a 
  &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;
  Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.
</copyright>
    <lastBuildDate>Thu, 01 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jwillikers.com/tags/bsd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Change your Shell</title>
      <link>https://jwillikers.com/post/change_your_shell/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/change_your_shell/</guid>
      <description>Sometimes, you just want to switch to a better shell for your terminal - like fish.
TutorialHere&amp;#8217;s a quick run through of how to change your default login shell which assumes you understand the basics of the command-line on Unix-like systems. These instructions are exemplified on an Ubuntu 20.04 system for the fish shell but this works just the same for any shell on *BSD, Linux, and macOS.
Install the fish package.</description>
    </item>
    
    <item>
      <title>My SSH Configuration</title>
      <link>https://jwillikers.com/post/my_ssh_configuration/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/my_ssh_configuration/</guid>
      <description>The OpenSSH client and server applications are ubiquitous. Like many a software dev, I&amp;#8217;m `ssh&amp;#8217;ing all over the place. And you know what? I&amp;#8217;ve put off learning the ins and outs of its configuration for far too long. I learned that a little bit of know-how can simplify my day-to-day use of SSH. That&amp;#8217;s exactly why I&amp;#8217;ve written this post to exemplify the configuration options I&amp;#8217;m now using.
SSH ConfigurationThe file ~/.</description>
    </item>
    
    <item>
      <title>DNS over TLS with Unbound</title>
      <link>https://jwillikers.com/post/unbound_dns_over_tls/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/unbound_dns_over_tls/</guid>
      <description>Recently, Firefox announced it&amp;#8217;s roll-out of DNS over HTTPS (DoH). That made me think, &#34;Encrypting DNS&amp;#8230;&amp;#8203; Why don&amp;#8217;t I do that for my home network?&#34; Well, I&amp;#8217;ve now had the opportunity to configure my Unbound DNS resolver to encrypt it&amp;#8217;s DNS requests. Unbound has support built-in for DoH&amp;#8217;s sibling protocol, DNS over TLS (DoT). Instead of encrypting DNS traffic and masking it as standard HTTPS traffic, it uses the dedicated port 853.</description>
    </item>
    
    <item>
      <title>IPv6 on OpenBSD</title>
      <link>https://jwillikers.com/post/openbsd_ipv6/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/openbsd_ipv6/</guid>
      <description>Configuring IPv6 on my OpenBSD home router was a much more difficult task than I&amp;#8217;d expected. While this was mostly due to the steep learning curve of IPv6 and DHCPv6, OpenBSD doesn&amp;#8217;t provide DHCPv6 support in its native DHCP daemon. I&amp;#8217;ve documented my setup and difficulties here in the hope it saves some time for someone else.
ConfigurationI configured IPv6 on on my home router running OpenBSD 6.7.
PFIPv6 packets need to get through the firewall for anything to happen.</description>
    </item>
    
    <item>
      <title>PF Badhost</title>
      <link>https://jwillikers.com/post/pf_badhost/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/pf_badhost/</guid>
      <description>Blocking connections to nefarious IP addresses in your firewall is usually a good idea. On OpenBSD, the pf-badhost script updates PF to block traffic to and from such addresses. This post walks through my installation and verification of pf-badhost. Make sure to check out the well-written installation instructions, too.
ConfigureDownload the pf-badhost.sh script.
ftp https://www.geoghegan.ca/scripts/pf-badhost.sh Install the script with the appropriate permissions.
install -g bin -m 644 -o root pf-badhost.sh /usr/local/bin/ 1The script will be owned by root, belong to the bin group, and be readable by everyone and writeable by the owner.</description>
    </item>
    
    <item>
      <title>DNSSEC with Unbound</title>
      <link>https://jwillikers.com/post/unbound_dnssec/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/unbound_dnssec/</guid>
      <description>Ever want to enable DNSSEC on your Unbound OpenBSD 6.6 server? Me too! Using this article as a guide, I document the process.
Unbound ConfigurationUse the ftp command to download the Root Hints.
ftp -o /var/unbound/etc/root.hints https://www.internic.net/domain/named.root Download the trust anchor file with the unbound-anchor utility.
unbound-anchor Configure unbound.conf. Add the location of the root.hints file and uncomment the lines with the keys auto-trust-anchor-file and val-log-level.
/var/unbound/etc/unbound.conf # Uncomment to enable DNSSEC validation.</description>
    </item>
    
    <item>
      <title>Unbound Adblock</title>
      <link>https://jwillikers.com/post/unbound_adblock/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/unbound_adblock/</guid>
      <description>Ever want to get rid of all those annoying internet ads? Me too. I&amp;#8217;d been planning on using something like Pi-hole, but recently stumbled upon unbound-adblock, which is perfect for my OpenBSD home router. The setup is very well-documented there, but I provide my own, slightly-modified setup instructions here. Most notably, the cron-job runs at 6:30 AM, not midnight, and I refined the PF rule which redirects DNS requests to Google&amp;#8217;s DNS servers.</description>
    </item>
    
    <item>
      <title>PPPoE on OpenBSD</title>
      <link>https://jwillikers.com/post/pppoe_openbsd/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/pppoe_openbsd/</guid>
      <description>Some ISP&amp;#8217;s establish connections with their customers&#39; networks through PPPoE. I recently setup an OpenBSD 6.6 router which required PPPoE. This is my story.
DNS ServersIf necessary, configure your system to use your preferred DNS nameservers.
Tip: A common way of connecting to your ISP&amp;#8217;s network is through DHCP. DHCP is capable of providing your system with DNS nameservers according to RFC 2132 and RFC 2937. To my knowledge, this capability is absent from the PPPoE Specification.</description>
    </item>
    
  </channel>
</rss>