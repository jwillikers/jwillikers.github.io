<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JWillikers</title>
    <link>https://jwillikers.com/post/</link>
    <description>Recent content in Posts on JWillikers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>jordan@jwillikers.com (Jordan Williams)</managingEditor>
    <webMaster>jordan@jwillikers.com (Jordan Williams)</webMaster>
    <copyright>Jordan Williams
&lt;br /&gt;
&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;
&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34;
  src=&#34;https://i.creativecommons.org/l/by-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;span xmlns:dct=&#34;http://purl.org/dc/terms/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34;
  property=&#34;dct:title&#34; rel=&#34;dct:type&#34;&gt;JWillikers&lt;/span&gt; by 
  &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;https://jwillikers.com&#34;
  property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Jordan Williams&lt;/a&gt;
  is licensed under a 
  &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;
  Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.
</copyright>
    <lastBuildDate>Thu, 08 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://jwillikers.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solarized Vim</title>
      <link>https://jwillikers.com/post/solarized_vim/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/solarized_vim/</guid>
      <description>I enjoy the Solarized color scheme, so I figured out how to set it up in Vim. The Solarized color scheme provides a plugin for Vim, which makes this pretty straightfoward. The following instructions detail how to do this on Ubuntu 20.04, but other than the installation step, this should work on any Unix-like system so long as Vim is at least version eight. This guide assumes you are familiar with installing packages from the command-line on Ubuntu, git, configuring Vim, and using Vim packages.</description>
    </item>
    
    <item>
      <title>Switch to fish</title>
      <link>https://jwillikers.com/post/switch_to_fish/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/switch_to_fish/</guid>
      <description>I’ve finally made the switch from ZSH to the fish shell. Unlike ZSH, I don’t need to install and manage a whole host of plugins. Everything I want comes packaged right in as part of the shell itself.
The SwitchIn this post, I describe how to switch to the fish shell and some of the interesting features it offers.
InstallInstalling fish is a piece of cake. On Ubuntu, a fish package is readily available.</description>
    </item>
    
    <item>
      <title>&#34;Too many open files&#34; when Compiling on macOS</title>
      <link>https://jwillikers.com/post/too_many_open_files_on_macos_when_compiling/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/too_many_open_files_on_macos_when_compiling/</guid>
      <description>Occasionally things just go wrong during large builds. One such occurrence is on macOS when compiling a large C++ project.
ProblemThe following error message is output by LLVM Clang 10.0.1 when compiling from the command-line. The Clion IDE builds the project just fine, of course.
$ cmake --build build ... In file included from /opt/local/include/boost/spirit/home/x3.hpp:19: In file included from /opt/local/include/boost/spirit/home/x3/operator.hpp:10: In file included from /opt/local/include/boost/spirit/home/x3/operator/sequence.hpp:12: /opt/local/include/boost/spirit/home/x3/operator/detail/sequence.hpp:25:10: fatal error: cannot open file &amp;#39;/opt/local/include/boost/fusion/include/as_deque.</description>
    </item>
    
    <item>
      <title>Change your Shell</title>
      <link>https://jwillikers.com/post/change_your_shell/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/change_your_shell/</guid>
      <description>Sometimes, you just want to switch to a better shell for your terminal - like fish.
TutorialHere’s a quick run through of how to change your default login shell which assumes you understand the basics of the command-line on Unix-like systems. These instructions are exemplified on an Ubuntu 20.04 system for the fish shell but this works just the same for any shell on *BSD, Linux, and macOS.
Install the fish package.</description>
    </item>
    
    <item>
      <title>My SSH Configuration</title>
      <link>https://jwillikers.com/post/my_ssh_configuration/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/my_ssh_configuration/</guid>
      <description>The OpenSSH client and server applications are ubiquitous. Like many a software dev, I’m `ssh’ing all over the place. And you know what? I’ve put off learning the ins and outs of its configuration for far too long. I learned that a little bit of know-how can simplify my day-to-day use of SSH. That’s exactly why I’ve written this post to exemplify the configuration options I’m now using.
SSH ConfigurationThe file ~/.</description>
    </item>
    
    <item>
      <title>Automatically Update Antigen</title>
      <link>https://jwillikers.com/post/automatically_update_antigen/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/automatically_update_antigen/</guid>
      <description>There’s a catch when it comes to managing plugins with Antigen as done in Configure ZSH.
According to the Antigen documentation: This is something you might not want to put in your .zshrc. Instead, run it occasionally to update your plugins.
— Antigen Wiki: Commands - antigen update I hate having to do any form of maintenance occasionally, especially simple maintenance. This has two potential outcomes:
Completely forget to do it ever.</description>
    </item>
    
    <item>
      <title>Configure ZSH</title>
      <link>https://jwillikers.com/post/configure_zsh/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/configure_zsh/</guid>
      <description>I’ve been using ZSH for years now as my shell. In that time, I’ve learned a few niceties to make the experience better. Namely, I’ve found the minimal oh-my-zsh prompt keeps out of the way and the git aliases super convenient. Plugins for autosuggestions, like in the fish shell, and syntax highlighting are also quite helpful. Antigen makes keeping plugins up-to-date a breeze.
TutorialThis tutorial explains how to install ZSH and set it as your default shell on Ubuntu 20.</description>
    </item>
    
    <item>
      <title>One-liner to Fetch the Latest Github Release</title>
      <link>https://jwillikers.com/post/fetch_latest_github_release/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/fetch_latest_github_release/</guid>
      <description>Sometimes, it would be awfully convenient to grab the installer for the latest release of your favorite Github project directly from the command-line. And if it could incorporate awk, that would be great too.[1] Well, the following command-line is a pretty nifty template to do just that! You will need curl for this to work. Substitute in the user or organization name, the project’s name, and the desired file extension for the &amp;lt;user&amp;gt;, &amp;lt;repo&amp;gt;, and &amp;lt;extension&amp;gt; fields respectively.</description>
    </item>
    
    <item>
      <title>Password-less Sudo</title>
      <link>https://jwillikers.com/post/passwordless_sudo/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/passwordless_sudo/</guid>
      <description>Typing a password to login is repetitive enough, isn’t it? Entering the password for Sudo on the command-line can be downright irritating. If you don’t need that extra bit of protection, why enter your password more than you have to?[1] You can forever skip entering your sudo password, and it’s super easy and cross-platform. For whatever reason, I learned and forgot about doing this sometime ago, so here’s the gist.</description>
    </item>
    
    <item>
      <title>Easily Virtualize Ubuntu MATE on macOS with Multipass</title>
      <link>https://jwillikers.com/post/easily_virtualize_ubuntu_mate_on_macos_with_multipass/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/easily_virtualize_ubuntu_mate_on_macos_with_multipass/</guid>
      <description>It’s Always Greener on the MATE Side  While I was working on my recent post Virtualize Ubuntu Desktop on macOS with QEMU, I came across Canonical’s Multipass utility. Multipass makes it extremely simple to spin up Ubuntu instances on the fly whether your on Linux, macOS, and Windows. While your VM may not be as speedy as with QEMU, I would be remiss for not doing a quick write-up on this tool which makes it so easy to get up and running.</description>
    </item>
    
    <item>
      <title>Virtualize Ubuntu Desktop on macOS with QEMU</title>
      <link>https://jwillikers.com/post/virtualize_ubuntu_desktop_on_macos_with_qemu/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/virtualize_ubuntu_desktop_on_macos_with_qemu/</guid>
      <description>The Focal Fossa nestles in on Santa Catalina Island  Recently, I discovered that the Linux hypervisor, QEMU, is available on macOS. This is particularly exciting because I have to spin-up Linux VMs on macs at my day job, and I’ve wanted to get some more hands-on experience with QEMU. QEMU runs VMs quite efficiently and provides a robust set of tools for creating, managing, and running virtual machines. Additionally, it’s open-source and not controlled by Oracle.</description>
    </item>
    
    <item>
      <title>Update U-Boot on the PinePhone</title>
      <link>https://jwillikers.com/post/update_uboot_pinephone/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/update_uboot_pinephone/</guid>
      <description>As I big fan of GNOME, I really wanted a similar experience on the PinePhone. That’s why I opted for running Manjaro ARM&amp;#39;s alpha for the PinePhone, which comes in a GNOME-like Phosh flavor. It’s been running from the SD card great so far, but I thought to update the internal U-Boot as I did on the Pinebook Pro.
TutorialThis tutorial provides instructions for updating the PinePhone’s bootloader from Manjaro running off of a microSD card.</description>
    </item>
    
    <item>
      <title>Update U-Boot on the Pinebook Pro</title>
      <link>https://jwillikers.com/post/update_uboot_pinebook_pro/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/update_uboot_pinebook_pro/</guid>
      <description>The other day, Elementary announced elementaryOS 6 preview builds for the Pinebook Pro. I went ahead and flashed an SD card with a build image to try it out. Instead of booting to elmentaryOS on the SD card as the system should have, it booted to Manjaro. While a quick restart from Manjaro caused the system to boot from the SD card, I figured it must be time to upgrade the bootloader, U-Boot.</description>
    </item>
    
    <item>
      <title>External Storage on the Pinebook Pro with ZFS</title>
      <link>https://jwillikers.com/post/zfs_external_storage_pinebook_pro/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/zfs_external_storage_pinebook_pro/</guid>
      <description>Note: This tutorial is out-of-date and will be updated when I get ZFS working again on the Pinebook Pro.
 The Pinebook Pro comes with a small amount of internal disk space, only 64 GB. While this is upgradeable to 128 GB, that still isn’t enough for those with large media collections. The easiest solution is to use a microSD card. And now you’re just dying to use ZFS on that, right?</description>
    </item>
    
    <item>
      <title>Backup Docker Data</title>
      <link>https://jwillikers.com/post/backup_docker_data/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/backup_docker_data/</guid>
      <description>Backups are super helpful, especially when you like to blow everything away fairly often. Backing up the data from a Docker container can help you quickly get things up and running again.
TutorialMy recent post detailed how to setup a UniFi Controller in a Docker container. This tutorial uses that container as an example for creating and restoring backups of data volumes.
BackupCreating backups is done by producing an archive of the important files on the host filesystem from the container’s data volume.</description>
    </item>
    
    <item>
      <title>Install ZFS on the Pinebook Pro</title>
      <link>https://jwillikers.com/post/install_zfs_pinebook_pro/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/install_zfs_pinebook_pro/</guid>
      <description>Recently, I obtained a 64-bit ARM, budget Linux laptop, the Pinebook Pro. It’s a wonderful, sleek little notebook, boasting great convenience and power-efficiency. I enjoy using it so much, it’s becoming my main machine, and I’d love love to put all of my music, audiobooks, pictures, and ebooks on it. The only problem being my media takes up a bit more than the 64 GiB available on the machine’s built-in eMMC.</description>
    </item>
    
    <item>
      <title>UniFi Controller</title>
      <link>https://jwillikers.com/post/unifi_controller/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/unifi_controller/</guid>
      <description>For wi-fi, I use use a UniFi AP. One slightly annoying aspect of this is the UniFi Controller. If you don’t have a smartphone or need to manage more than one device, you’ll need to set one up. I provide a brief tutorial for setting up the UniFi Controller with Docker Compose here.
TutorialAn existing Docker image makes setting up the UniFi Controller a breeze. Here’s how.
Install DockerFirst, you must install Docker on your system.</description>
    </item>
    
    <item>
      <title>DNS over TLS with Unbound</title>
      <link>https://jwillikers.com/post/unbound_dns_over_tls/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/unbound_dns_over_tls/</guid>
      <description>Recently, Firefox announced it’s roll-out of DNS over HTTPS (DoH). That made me think, &amp;#34;Encrypting DNS…​ Why don’t I do that for my home network?&amp;#34; Well, I’ve now had the opportunity to configure my Unbound DNS resolver to encrypt it’s DNS requests. Unbound has support built-in for DoH’s sibling protocol, DNS over TLS (DoT). Instead of encrypting DNS traffic and masking it as standard HTTPS traffic, it uses the dedicated port 853.</description>
    </item>
    
    <item>
      <title>Automatically Detect &amp; Report Hard Drive Failure</title>
      <link>https://jwillikers.com/post/smartd_ubuntu/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/smartd_ubuntu/</guid>
      <description>I recently fixed my mother-in-law’s laptop. Long story short, the hard disk was toast. When I repaired the computer, I decided it would be best to avoid the frustration and confusion of a failing hard drive in the future. So, how does one know if his or her mother-in-law’s hard disk is reaching senility? SmartMonTools appears to be the best tool for the job. It’s a tool for monitoring and reporting hard disk health with Self-Monitoring, Anlysis, and Reporting Technology (SMART) which is built into most hard drives.</description>
    </item>
    
    <item>
      <title>OpenSMTPD Relay on Ubuntu</title>
      <link>https://jwillikers.com/post/opensmtpd_ubuntu/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/opensmtpd_ubuntu/</guid>
      <description>It can be handy to have your system email you if it detects an issue or potential security risk. Unfortunately, this isn’t always straightforward, especially when you want to send an email from your desktop computer. Sending an email directly from your desktop to your email account is likely going to accomplish nothing. The email will likely be blocked since, to your email provider, it is from an unknown source. I ran into this problem recently trying to set up SmartMonTools to send an email when it detected hard drive errors.</description>
    </item>
    
    <item>
      <title>IPv6 on OpenBSD</title>
      <link>https://jwillikers.com/post/openbsd_ipv6/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/openbsd_ipv6/</guid>
      <description>Configuring IPv6 on my OpenBSD home router was a much more difficult task than I’d expected. While this was mostly due to the steep learning curve of IPv6 and DHCPv6, OpenBSD doesn’t provide DHCPv6 support in its native DHCP daemon. I’ve documented my setup and difficulties here in the hope it saves some time for someone else.
ConfigurationI configured IPv6 on on my home router running OpenBSD 6.7.
PFIPv6 packets need to get through the firewall for anything to happen.</description>
    </item>
    
    <item>
      <title>PF Badhost</title>
      <link>https://jwillikers.com/post/pf_badhost/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/pf_badhost/</guid>
      <description>Blocking connections to nefarious IP addresses in your firewall is usually a good idea. On OpenBSD, the pf-badhost script updates PF to block traffic to and from such addresses. This post walks through my installation and verification of pf-badhost. Make sure to check out the well-written installation instructions, too.
ConfigureDownload the pf-badhost.sh script.
ftp https://www.geoghegan.ca/scripts/pf-badhost.sh Install the script with the appropriate permissions.
install -g bin -m 644 -o root pf-badhost.sh /usr/local/bin/ 1The script will be owned by root, belong to the bin group, and be readable by everyone and writeable by the owner.</description>
    </item>
    
    <item>
      <title>DNSSEC with Unbound</title>
      <link>https://jwillikers.com/post/unbound_dnssec/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/unbound_dnssec/</guid>
      <description>Ever want to enable DNSSEC on your Unbound OpenBSD 6.6 server? Me too! Using this article as a guide, I document the process.
Unbound ConfigurationUse the ftp command to download the Root Hints.
ftp -o /var/unbound/etc/root.hints https://www.internic.net/domain/named.root Download the trust anchor file with the unbound-anchor utility.
unbound-anchor Configure unbound.conf. Add the location of the root.hints file and uncomment the lines with the keys auto-trust-anchor-file and val-log-level.
/var/unbound/etc/unbound.conf # Uncomment to enable DNSSEC validation.</description>
    </item>
    
    <item>
      <title>Unbound Adblock</title>
      <link>https://jwillikers.com/post/unbound_adblock/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/unbound_adblock/</guid>
      <description>Ever want to get rid of all those annoying internet ads? Me too. I’d been planning on using something like Pi-hole, but recently stumbled upon unbound-adblock, which is perfect for my OpenBSD home router. The setup is very well-documented there, but I provide my own, slightly-modified setup instructions here. Most notably, the cron-job runs at 6:30 AM, not midnight, and I refined the PF rule which redirects DNS requests to Google’s DNS servers.</description>
    </item>
    
    <item>
      <title>PPPoE on OpenBSD</title>
      <link>https://jwillikers.com/post/pppoe_openbsd/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/pppoe_openbsd/</guid>
      <description>Some ISP’s establish connections with their customers&amp;#39; networks through PPPoE. I recently setup an OpenBSD 6.6 router which required PPPoE. This is my story.
DNS ServersIf necessary, configure your system to use your preferred DNS nameservers.
Tip: A common way of connecting to your ISP’s network is through DHCP. DHCP is capable of providing your system with DNS nameservers according to RFC 2132 and RFC 2937. To my knowledge, this capability is absent from the PPPoE Specification.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jwillikers.com/post/auto_mount_nextcloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/auto_mount_nextcloud/</guid>
      <description>https://wiki.archlinux.org/index.php/Davfs2#Using_systemd
/etc/systemd/system/mnt-webdav-service.mount [Unit] Description=Mount WebDAV Service After=network-online.target Wants=network-online.target [Mount] What=http(s)://address:&amp;lt;port&amp;gt;/path Where=/mnt/webdav/service Options=uid=1000,file_mode=0664,dir_mode=2775,grpid Type=davfs TimeoutSec=15 [Install] WantedBy=multi-user.target /etc/systemd/system/mnt-webdav-service.automount [Unit] Description=Mount WebDAV Service After=network-online.target Wants=network-online.target [Automount] Where=/mnt/webdav/service TimeoutIdleSec=300 [Install] WantedBy=remote-fs.target https://wiki.archlinux.org/index.php/Fstab#Automount_with_systemd
https://wiki.archlinux.org/index.php/Davfs2#Storing_credentials
/etc/fstab https://webdav.example/path /mnt/webdav davfs rw,user,uid=username,noauto 0 0 /etc/davfs2/secrets https://webdav.example/path davusername davpassword $ chmod 600 /etc/davfs2/secrets $ chown root:root /etc/davfs2/secrets $ chmod 600 ~/.davfs2/secrets </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jwillikers.com/post/pager_syntax_highlighting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/pager_syntax_highlighting/</guid>
      <description>Terminal Pager Syntax Highlighting
 title = &amp;#34;Terminal Pager Syntax Highlighting&amp;#34; categories = [&amp;#34;Command-line&amp;#34;] tags = [&amp;#34;bat&amp;#34;, &amp;#34;BSD&amp;#34;, &amp;#34;delta&amp;#34;, &amp;#34;Linux&amp;#34;, &amp;#34;git&amp;#34;, &amp;#34;less&amp;#34;, &amp;#34;macOS&amp;#34;, &amp;#34;source-highlight&amp;#34;, &amp;#34;Ubuntu&amp;#34;, &amp;#34;Unix&amp;#34;, &amp;#34;Vim&amp;#34;, &amp;#34;vimpager&amp;#34;, &amp;#34;vimcat&amp;#34;] date = &amp;#34;2020-10-11&amp;#34; draft = true The default pager in most Unix terminals, usually less, works great for a scrolling through text. It’s certainly a great improvement over its predecessor [more], though this doesn’t mean it can’t be improved.[1] One such area for enhancement is syntax highlighting, which can make scanning through code a bit less tedious.</description>
    </item>
    
  </channel>
</rss>
