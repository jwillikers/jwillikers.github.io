<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command-line on JWillikers</title>
    <link>https://jwillikers.com/categories/command-line/</link>
    <description>Recent content in Command-line on JWillikers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>jordan@jwillikers.com (Jordan Williams)</managingEditor>
    <webMaster>jordan@jwillikers.com (Jordan Williams)</webMaster>
    <copyright>Jordan Williams
&lt;br /&gt;
&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;
&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34;
  src=&#34;https://i.creativecommons.org/l/by-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;span xmlns:dct=&#34;http://purl.org/dc/terms/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34;
  property=&#34;dct:title&#34; rel=&#34;dct:type&#34;&gt;JWillikers&lt;/span&gt; by 
  &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;https://jwillikers.com&#34;
  property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Jordan Williams&lt;/a&gt;
  is licensed under a 
  &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;
  Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.
</copyright>
    <lastBuildDate>Thu, 08 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://jwillikers.com/categories/command-line/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solarized Vim</title>
      <link>https://jwillikers.com/post/solarized_vim/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/solarized_vim/</guid>
      <description>I enjoy the Solarized color scheme, so I figured out how to set it up in Vim. The Solarized color scheme provides a plugin for Vim, which makes this pretty straightfoward. The following instructions detail how to do this on Ubuntu 20.04, but other than the installation step, this should work on any Unix-like system so long as Vim is at least version eight. This guide assumes you are familiar with installing packages from the command-line on Ubuntu, git, configuring Vim, and using Vim packages.</description>
    </item>
    
    <item>
      <title>Switch to fish</title>
      <link>https://jwillikers.com/post/switch_to_fish/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/switch_to_fish/</guid>
      <description>I’ve finally made the switch from ZSH to the fish shell. Unlike ZSH, I don’t need to install and manage a whole host of plugins. Everything I want comes packaged right in as part of the shell itself.
The SwitchIn this post, I describe how to switch to the fish shell and some of the interesting features it offers.
InstallInstalling fish is a piece of cake. On Ubuntu, a fish package is readily available.</description>
    </item>
    
    <item>
      <title>&#34;Too many open files&#34; when Compiling on macOS</title>
      <link>https://jwillikers.com/post/too_many_open_files_on_macos_when_compiling/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/too_many_open_files_on_macos_when_compiling/</guid>
      <description>Occasionally things just go wrong during large builds. One such occurrence is on macOS when compiling a large C++ project.
ProblemThe following error message is output by LLVM Clang 10.0.1 when compiling from the command-line. The Clion IDE builds the project just fine, of course.
$ cmake --build build ... In file included from /opt/local/include/boost/spirit/home/x3.hpp:19: In file included from /opt/local/include/boost/spirit/home/x3/operator.hpp:10: In file included from /opt/local/include/boost/spirit/home/x3/operator/sequence.hpp:12: /opt/local/include/boost/spirit/home/x3/operator/detail/sequence.hpp:25:10: fatal error: cannot open file &amp;#39;/opt/local/include/boost/fusion/include/as_deque.</description>
    </item>
    
    <item>
      <title>Change your Shell</title>
      <link>https://jwillikers.com/post/change_your_shell/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/change_your_shell/</guid>
      <description>Sometimes, you just want to switch to a better shell for your terminal - like fish.
TutorialHere’s a quick run through of how to change your default login shell which assumes you understand the basics of the command-line on Unix-like systems. These instructions are exemplified on an Ubuntu 20.04 system for the fish shell but this works just the same for any shell on *BSD, Linux, and macOS.
Install the fish package.</description>
    </item>
    
    <item>
      <title>Configure ZSH</title>
      <link>https://jwillikers.com/post/configure_zsh/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/configure_zsh/</guid>
      <description>I’ve been using ZSH for years now as my shell. In that time, I’ve learned a few niceties to make the experience better. Namely, I’ve found the minimal oh-my-zsh prompt keeps out of the way and the git aliases super convenient. Plugins for autosuggestions, like in the fish shell, and syntax highlighting are also quite helpful. Antigen makes keeping plugins up-to-date a breeze.
TutorialThis tutorial explains how to install ZSH and set it as your default shell on Ubuntu 20.</description>
    </item>
    
    <item>
      <title>One-liner to Fetch the Latest Github Release</title>
      <link>https://jwillikers.com/post/fetch_latest_github_release/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/fetch_latest_github_release/</guid>
      <description>Sometimes, it would be awfully convenient to grab the installer for the latest release of your favorite Github project directly from the command-line. And if it could incorporate awk, that would be great too.[1] Well, the following command-line is a pretty nifty template to do just that! You will need curl for this to work. Substitute in the user or organization name, the project’s name, and the desired file extension for the &amp;lt;user&amp;gt;, &amp;lt;repo&amp;gt;, and &amp;lt;extension&amp;gt; fields respectively.</description>
    </item>
    
    <item>
      <title>Password-less Sudo</title>
      <link>https://jwillikers.com/post/passwordless_sudo/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <author>jordan@jwillikers.com (Jordan Williams)</author>
      <guid>https://jwillikers.com/post/passwordless_sudo/</guid>
      <description>Typing a password to login is repetitive enough, isn’t it? Entering the password for Sudo on the command-line can be downright irritating. If you don’t need that extra bit of protection, why enter your password more than you have to?[1] You can forever skip entering your sudo password, and it’s super easy and cross-platform. For whatever reason, I learned and forgot about doing this sometime ago, so here’s the gist.</description>
    </item>
    
  </channel>
</rss>
