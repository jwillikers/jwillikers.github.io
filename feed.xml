<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.jwillikers.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.jwillikers.com/" rel="alternate" type="text/html" /><updated>2021-03-08T13:26:15-06:00</updated><id>https://www.jwillikers.com/feed.xml</id><title type="html">JWillikers</title><subtitle>Handy admin and dev guides from my myriad of tinkering</subtitle><author><name>Jordan Williams</name></author><entry><title type="html">Btrfs Scrub</title><link href="https://www.jwillikers.com/btrfs-scrub" rel="alternate" type="text/html" title="Btrfs Scrub" /><published>2021-03-05T00:00:00-06:00</published><updated>2021-03-05T00:00:00-06:00</updated><id>https://www.jwillikers.com/Btrfs%20Scrub</id><content type="html" xml:base="https://www.jwillikers.com/btrfs-scrub">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You probably want to take advantage of the data integrity checking offered by &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt;.
Btrfs calculates checksums for all data written to disk.
These checksums are used to verify the data hasn&amp;#8217;t been unduly altered.
While data is verified every time it is read, what about the data that isn&amp;#8217;t read often?
How long may bit rot go unnoticed in that case?
That&amp;#8217;s the crux of this blog post which will explain how to best preserve your data on Btrfs and detect corruption early.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;scrub&quot;&gt;Scrub&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To scrub you filesystem is to have all the data read from disk and validated against the stored checksums.
This detects corrupt data.
When coupled with redundancy such as a raid configuration, self-healing fully restores the damaged data on the disk.
If you don&amp;#8217;t use redundancy, then the scrub will alert you to the corruption so that you can restore the data manually from backups.
Both Btrfs and &lt;a href=&quot;https://openzfs.org/wiki/Main_Page&quot;&gt;ZFS&lt;/a&gt; handle scrubs in this manner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To scrub a Btrfs filesystem use &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-scrub&quot;&gt;btrfs-scrub(8)&lt;/a&gt;, and in case your interested, the equivalent ZFS command is &lt;a href=&quot;https://openzfs.github.io/openzfs-docs/man/8/zpool-scrub.8.html&quot;&gt;zpool-scrub(8)&lt;/a&gt;.
Both of them also offer ways to cancel, pause, resume, and monitor scrubs.
Btrfs scrubs entire filesystems at a time which is provided by a device or just any directory&amp;#8217;s path on the target filesystem.
I&amp;#8217;m not exactly sure why it takes a directory path to anywhere on the filesystem since that seems a bit arbitrary.
You should probably use either a mount point or device path to make the intended target clear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if the &lt;code&gt;btrfs-scrub&lt;/code&gt; command accepts a directory path, it doesn&amp;#8217;t necessarily just scrub that directory.
It will scrub the entire filesystem where that directory resides.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To initiate a scrub in the background, use the start subcommand followed by the path or device.
Here I initiate a scrub on the device on which my root filesystem resides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs scrub start &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
scrub started on /dev/mapper/sda2_crypt, fsid 175792e7-4167-40d1-aebc-78b948d6d378 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10555&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To check on the status of a scrub, use the status subcommand and the path or device.
Check the status of the previous scrub like so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs scrub status &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
scrub status &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;175792e7-4167-40d1-aebc-78b948d6d378
	scrub started at Fri Mar  5 06:07:42 2021, running &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;00:01:25
	total bytes scrubbed: 26.19GiB with 0 errors&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many circumstances, you might want the scrub to block and return once it finishes.
This is ideal for people like me who don&amp;#8217;t want to type a status command constantly and it&amp;#8217;s ideal for running the scrub as a command in systemd.
Use the &lt;code&gt;-B&lt;/code&gt; flag to scrub in the foreground.
This command scrubs my boot partition and returns once the scrub is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs scrub start &lt;span class=&quot;nt&quot;&gt;-B&lt;/span&gt; /boot
scrub &lt;span class=&quot;k&quot;&gt;done for &lt;/span&gt;264b42a6-a09c-40cc-b754-88926d43b395
	scrub started at Fri Mar  5 06:13:23 2021 and finished after 00:00:01
	total bytes scrubbed: 159.55MiB with 0 errors&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That didn&amp;#8217;t take long!
There&amp;#8217;s also subcommands to pause, resume, and cancel scrubs as needed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;schedule&quot;&gt;Schedule&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Scheduling regular scrubs is a necessary component of proper maintenance
You can regularly run scrubs manually or automate the process of running them yet it&amp;#8217;s critical that you monitor the results either way.
If you go to the trouble to automate your scrubs you&amp;#8217;ll want to make sure to regularly check the results.
Ideally you&amp;#8217;d use something like www.nagios.org[Nagios] for monitoring this aspect of your systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t rely on alerts whether that is through email or desktop notifications.
If they fail silently, you won&amp;#8217;t realize when something has gone horribly wrong.
Set aside time regularly to check your systems' status and health.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Arch Linux provides a handy &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;systemd.service&lt;/a&gt; and &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.timer.html&quot;&gt;systemd.timer&lt;/a&gt; to automate scrubs.
The &lt;a href=&quot;https://github.com/kdave/btrfsmaintenance&quot;&gt;Btrfs maintenance toolbox&lt;/a&gt; provides similar functionality.
We&amp;#8217;ll take a look at the instantiable systemd units provided by Arch Linux for how to make scheduling regular scrubs a breeze.
The Arch Linux Wiki&amp;#8217;s Btrfs Scrub section has a subsection on these systemd units, &lt;a href=&quot;https://wiki.archlinux.org/index.php/btrfs#Start_with_a_service_or_timer&quot;&gt;Start with a service or timer&lt;/a&gt;.
The systemd units here should be dropped in the standard system directory &lt;code&gt;/etc/systemd/system&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is the &lt;a href=&quot;https://github.com/archlinux/svntogit-packages/blob/packages/btrfs-progs/trunk/btrfs-scrub%40.service&quot;&gt;Arch Linux systemd Btrfs scrub service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/systemd/system/btrfs-scrub@.service&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Btrfs scrub on %f
&lt;span class=&quot;nt&quot;&gt;ConditionPathIsMountPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;%f
&lt;span class=&quot;nt&quot;&gt;RequiresMountsFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;%f

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Nice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;19
&lt;span class=&quot;nt&quot;&gt;IOSchedulingClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;idle
&lt;span class=&quot;nt&quot;&gt;KillSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;SIGINT
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/btrfs scrub start -B %f&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;systemd.service&lt;/a&gt; is an &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html#Service%20Templates&quot;&gt;instantiated service&lt;/a&gt; which expects that a properly escaped path is provided after the &lt;code&gt;@&lt;/code&gt; and before the &lt;code&gt;.service&lt;/code&gt; extension.
systemd uses special escaping rules to map filesystem paths to unit file names.
The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-escape.html&quot;&gt;systemd-escape(1)&lt;/a&gt; tool makes it quite easy to convert a given path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This service requires that the path of the service unit is indeed a mount point and that it exists with &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.unit.html#ConditionPathIsMountPoint=&quot;&gt;ConditionPathIsMountPoint&lt;/a&gt;.
The argument &lt;code&gt;%f&lt;/code&gt; represents the unescaped path used to instantiate this systemd unit.
Similarly, the &lt;code&gt;%i&lt;/code&gt; flag is the escaped version of the path used to instantiate this unit, that is the string between &lt;code&gt;@&lt;/code&gt; and before &lt;code&gt;.service&lt;/code&gt; when starting the unit.
&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.unit.html#RequiresMountsFor=&quot;&gt;RequiresMountsFor&lt;/a&gt; will ensure that any mount points on the given path are mounted before executing the unit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One might opt to use {BindsTo} and {After} instead of &lt;code&gt;RequiresMountsFor&lt;/code&gt; to define a stronger relationship to the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.mount.html&quot;&gt;systemd.mount&lt;/a&gt; unit responsible for mounting the filesystem at the given mount point.
systemd mount units are usually generated automatically from entries in &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/fsck.8.html&quot;&gt;/etc/fstab&lt;/a&gt;.
For this dependency relationship to work, a corresponding systemd mount unit needs to exist.
You&amp;#8217;ll want the filesystem your scrubbing to have an entry in fstab or otherwise provide the mount unit in some other way.
&lt;code&gt;BindsTo&lt;/code&gt; requires that the filesystem at the mount point be available the entire time this unit is running.
If it becomes unavailable for some reason, the mount unit fails and the scrub service is killed along with it.
The &lt;code&gt;After&lt;/code&gt; keyword requires that the target be mounted before this service runs.
Both of these would be set to &lt;code&gt;%i.mount&lt;/code&gt;, the name of the corresponding systemd mount unit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Nice=&quot;&gt;Nice&lt;/a&gt; directive sets the scheduling priority to the lowest possible value, &lt;em&gt;19&lt;/em&gt;, giving the scrub a very low priority to avoid hogging the system CPU time.
The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.exec.html#IOSchedulingClass=&quot;&gt;IOSchedulingClass&lt;/a&gt; directive is set to &lt;code&gt;idle&lt;/code&gt; which effectively means that the IO activity of the process shouldn&amp;#8217;t impact normal system activity.
the scrub will only use the disk when no other programs are using it.
&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.kill.html#KillSignal=&quot;&gt;KillSignal&lt;/a&gt; sets the signal used to kill the process to SIGINT, i.e. &lt;kbd&gt;Ctrl-C&lt;/kbd&gt;.
Finally, the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html#ExecStart=&quot;&gt;ExecStart&lt;/a&gt; executes the scrub command on the unescaped path used to instantiate the service but uses &lt;code&gt;-B&lt;/code&gt; to avoid immediately returning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemctl.html#&quot;&gt;systemctl(1)&lt;/a&gt; command handles interacting with systemd services and units.
To start a scrub directly with the systemd service, start the the systemd unit with &lt;code&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemctl.html#start%20PATTERN%E2%80%A6&quot;&gt;systemctl start&lt;/a&gt;&lt;/code&gt;.
Here, I start the unit on the root path of the filesystem which is converted by systemd to &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start btrfs-scrub@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;systemd-escape &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can then check the status of the systemd service with &lt;code&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemctl.html#status%20PATTERN%E2%80%A6%7CPID%E2%80%A6%5D&quot;&gt;systemctl status&lt;/a&gt;&lt;/code&gt; as follows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status btrfs-scrub@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;systemd-escape &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.service
● btrfs-scrub@-.service - Btrfs scrub on /
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/etc/systemd/system/btrfs-scrub@.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; static&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: inactive &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dead&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;timer&quot;&gt;Timer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is the &lt;a href=&quot;https://github.com/archlinux/svntogit-packages/blob/packages/btrfs-progs/trunk/btrfs-scrub%40.timer&quot;&gt;Arch Linux systemd Btrfs scrub timer&lt;/a&gt; albeit with a small modification on my part.
The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.timer.html&quot;&gt;systemd.timer&lt;/a&gt; runs on the first and fifteenth of every month instead of only once a month.
Weekly is also a good option which can be configured by setting &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.timer.html#OnCalendar=&quot;&gt;OnCalendar&lt;/a&gt; to &lt;code&gt;weekly&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/systemd/system/btrfs-scrub@.timer&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Btrfs scrub on %f twice per month

&lt;span class=&quot;k&quot;&gt;[Timer]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;*-*-1,15
&lt;span class=&quot;nt&quot;&gt;AccuracySec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;1d
&lt;span class=&quot;nt&quot;&gt;RandomizedDelaySec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;1w
&lt;span class=&quot;nt&quot;&gt;Persistent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;true

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;timers.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.timer.html#Persistent=&quot;&gt;Persistent&lt;/a&gt; keyword ensures the service runs even if the timer would have fired previously but the system was not available.
If you miss a scrub due to your machine being powered off, the scrub will happen the next time you boot up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use &lt;code&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemctl.html#enable%20UNIT%E2%80%A6&quot;&gt;systemctl enable&lt;/a&gt;&lt;/code&gt; to activate the timer.
Here I set the timer to scrub the root filesystem automatically activate at boot while starting the timer immediately with &lt;code&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemctl.html#--now&quot;&gt;--now&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; btrfs-scrub@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;systemd-escape &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.timer
Created symlink /etc/systemd/system/timers.target.wants/btrfs-scrub@-.timer → /etc/systemd/system/btrfs-scrub@.timer.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with the service, you can check the status of the systemd timer which is shown here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status btrfs-scrub@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;systemd-escape &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.timer
● btrfs-scrub@boot.timer - Btrfs scrub on / twice per month
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/etc/systemd/system/btrfs-scrub@.timer&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; indirect&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s a scrub!
Hopefully you&amp;#8217;ve got some valuable insight into scrubbing and managing scrubs with Btrfs.
Happy scrubbing!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="Arch" /><category term="Btrfs" /><category term="Linux" /><category term="scrub" /><category term="systemd" /><category term="ZFS" /><summary type="html">You probably want to take advantage of the data integrity checking offered by Btrfs. Btrfs calculates checksums for all data written to disk. These checksums are used to verify the data hasn&amp;#8217;t been unduly altered. While data is verified every time it is read, what about the data that isn&amp;#8217;t read often? How long may bit rot go unnoticed in that case? That&amp;#8217;s the crux of this blog post which will explain how to best preserve your data on Btrfs and detect corruption early.</summary></entry><entry><title type="html">GNOME Boxes on Btrfs</title><link href="https://www.jwillikers.com/gnome-boxes-on-btrfs" rel="alternate" type="text/html" title="GNOME Boxes on Btrfs" /><published>2021-03-04T00:00:00-06:00</published><updated>2021-03-04T00:00:00-06:00</updated><id>https://www.jwillikers.com/GNOME%20Boxes%20on%20Btrfs</id><content type="html" xml:base="https://www.jwillikers.com/gnome-boxes-on-btrfs">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, you&amp;#8217;ve got &lt;a href=&quot;https://libvirt.org/&quot;&gt;libvirt&lt;/a&gt; installed on your Linux box and your looking for a simple application for running virtual machines.
Look no further than &lt;a href=&quot;https://wiki.gnome.org/Apps/Boxes&quot;&gt;Boxes&lt;/a&gt;, so far as it meets your needs, of course.
What&amp;#8217;s that you ask?
What do you need to figure out to run on this on a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; filesystem?
Well, you&amp;#8217;ve come to the right place!
This post describes how to install and accommodate Boxes on Btrfs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial describes how to install GNOME &lt;a href=&quot;https://wiki.gnome.org/Apps/Boxes&quot;&gt;Boxes&lt;/a&gt; on a Btrfs filesystem on &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 5.1 which is based on &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04.
You&amp;#8217;ll need to have libvirt installed.
Instructions for this are available in the post &lt;a href=&quot;install-libvirt-on-elementary-os-5-1.html&quot;&gt;Install libvirt on elementary OS 5.1&lt;/a&gt;, which addresses Btrfs concerns.
You should be familiar with installing software on Ubuntu and elementary OS, &lt;a href=&quot;https://flatpak.org/&quot;&gt;Flatpak&lt;/a&gt;, the command-line, and Btrfs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more robust configurations and anything that doesn&amp;#8217;t &lt;em&gt;just work&lt;/em&gt; in Boxes, try &lt;a href=&quot;https://virt-manager.org/&quot;&gt;virt-manager&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Boxes is readily available in two formats, as a Flatpak and a deb package from Ubuntu&amp;#8217;s repositories.
You can install in one or both ways.
The Flatpak will receive updates to newer versions where the deb package won&amp;#8217;t be updated beyond the minor version provided, currently 3.28.
While the Flatpak will be a much newer version, development in Flatpak is still necessary to expose and connect all the necessary system components for virtualization.
Some things may not work quite right yet with the Flatpak, but I&amp;#8217;ve found it to work well enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;flatpak&quot;&gt;Flatpak&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Flatpak can be installed system-wide or for an individual user.
The instructions below describe both methods.
systemd,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Add the Flathub remote.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;User&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ flatpak &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; remote-add &lt;span class=&quot;nt&quot;&gt;--if-not-exists&lt;/span&gt; flathub https://flathub.org/repo/flathub.flatpakrepo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;System&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;flatpak &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt; remote-add &lt;span class=&quot;nt&quot;&gt;--if-not-exists&lt;/span&gt; flathub https://flathub.org/repo/flathub.flatpakrepo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the GNOME Boxes Flatpak.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;User&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ flatpak &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; flathub org.gnome.Boxes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;System&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;flatpak &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; flathub org.gnome.Boxes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;system_package&quot;&gt;System Package&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Install the GNOME Boxes Ubuntu package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gnome-boxes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;btrfs&quot;&gt;Btrfs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Boxes uses the copy-on-write &lt;a href=&quot;https://qemu.readthedocs.io/en/latest/system/images.html#cmdoption-image-formats-arg-qcow2&quot;&gt;qcow2&lt;/a&gt; disk image format.
If you use Btrfs on your system like I do, then you&amp;#8217;ll want to avoid placing these &lt;em&gt;CoW&lt;/em&gt; disk images on a &lt;em&gt;CoW&lt;/em&gt; Btrfs filesystem.
You&amp;#8217;ll probably want to exclude the disk images from Btrfs snapshots as well and opt to manage you disk image snapshots independently using the built-in features of qcow2.
In the future, perhaps libvirt will provide a native Btrfs storage pool making the qcow2 format unnecessary along with these workarounds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sections here demonstrate a couple of ways to disable &lt;em&gt;CoW&lt;/em&gt; for the disk image directory used by Boxes and how to create a separate subvolume for that directory.
The location of the Boxes disk image directory depends on whether it is installed as a Flatpak or a deb package.
Refer to {Where does Boxes store disk images} in the Boxes documentation for more information.
Commands are provide for both locations where feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;exclude_from_btrfs_snapshots&quot;&gt;Exclude From Btrfs Snapshots&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you snapshot your filesystem, take care to exclude the Boxes virtual disk image directory by making the directory a subvolume.
Btrfs subvolumes are automatically excluded from snapshots of their parent subvolumes.
Snapshots for virtual disk images should be handled in the disk image itself.
Snapshots are provided by default qcow2 format used by Boxes.
Here&amp;#8217;s how to create the subvolume.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Delete the current images directory.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Flatpak&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;rmdir&lt;/span&gt; ~/.var/app/org.gnome.Boxes/data/gnome-boxes/images&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;System Package&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;rmdir&lt;/span&gt; ~/.local/share/gnome-boxes/images&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a subvolume in its place.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Flatpak&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ btrfs subvolume create ~/.var/app/org.gnome.Boxes/data/gnome-boxes/images
Create subvolume &lt;span class=&quot;s1&quot;&gt;'/home/jordan/.var/app/org.gnome.Boxes/data/gnome-boxes/images'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;System Package&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;➜ btrfs subvolume create ~/.local/share/gnome-boxes/images
Create subvolume '/home/jordan/.local/share/gnome-boxes/images'&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;disable_cow&quot;&gt;Disable &lt;em&gt;CoW&lt;/em&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two most straightforward ways to disable &lt;em&gt;CoW&lt;/em&gt; for a directory, or subvolume, are to use a file attribute or libvirt&amp;#8217;s storage pool feature.
Use whichever one you prefer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s also the &lt;code&gt;nodatacow&lt;/code&gt; mount option, but a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat&quot;&gt;flat layout&lt;/a&gt; in a home directory isn&amp;#8217;t exactly the pinnacle of convenience.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;chattr&quot;&gt;chattr&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest way to disable &lt;em&gt;CoW&lt;/em&gt; on a particular directory or file is with &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man1/chattr.1.html&quot;&gt;chattr(1)&lt;/a&gt; as described in &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/FAQ#Can_copy-on-write_be_turned_off_for_data_blocks.3F&quot;&gt;Can copy-on-write be turned off for data blocks?&lt;/a&gt;.
This makes it easy to disable &lt;em&gt;CoW&lt;/em&gt; on the Boxes disk image directory.
To do this, &lt;em&gt;add&lt;/em&gt; the &lt;em&gt;no copy on write&lt;/em&gt; attribute with the &lt;code&gt;+C&lt;/code&gt; option followed by the directory.
The following commands disable &lt;em&gt;CoW&lt;/em&gt; on Boxes' image directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Flatpak&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ chattr +C ~/.var/app/org.gnome.Boxes/data/gnome-boxes/images&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;System Package&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ chattr +C ~/.local/share/gnome-boxes/images&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;libvirt_storage_pool_feature&quot;&gt;libvirt Storage Pool Feature&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Boxes creates a dedicated libvirt storage pool.
libvirt uses the concept of storage pools to abstract the complexities involved in managing the underlying virtual machine disk images in a variety of situations.
There&amp;#8217;s a bit to it, but I&amp;#8217;ll leave out the lengthy explanation for brevity.
libvirt has fantastic documentation on its &lt;a href=&quot;https://libvirt.org/storage.html&quot;&gt;Storage Management&lt;/a&gt; if you wish to learn more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;elementary OS 5.1 and Ubuntu 18.04 only ship with access to libvirt 4.0.0, so you&amp;#8217;ll need to get newer version by some external means for this to work.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;CoW&lt;/em&gt; can be disabled on the libvirt storage pool by configuring the appropriate storage pool feature.
libvirt stores pretty much all configuration in XML files.
This is the case for storage pools and the XML can be viewed and edited with &lt;a href=&quot;https://libvirt.org/manpages/virsh.html&quot;&gt;virsh(1)&lt;/a&gt;.
The steps here walk through the steps to disable &lt;em&gt;CoW&lt;/em&gt; on the Boxes storage pool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Find the Boxes storage pool with the &lt;a href=&quot;https://libvirt.org/manpages/virsh.html#pool-list&quot;&gt;pool-list&lt;/a&gt; subcommand.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ virsh pool-list
 Name                 State      Autostart
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------&lt;/span&gt;
 default              active     &lt;span class=&quot;nb&quot;&gt;yes
 &lt;/span&gt;gnome-boxes          active     &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;libvirt&amp;#8217;s default pool is simply called &lt;em&gt;default&lt;/em&gt; while Boxes' pool is named &lt;em&gt;gnome-boxes&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To view the current XML configuration for a pool, use the &lt;a href=&quot;https://libvirt.org/manpages/virsh.html#pool-dumpxml&quot;&gt;pool-dumpxml&lt;/a&gt; subcommand followed by the pool&amp;#8217;s name.
Here I output the default pool&amp;#8217;s XML configuration where you can verify &lt;em&gt;path&lt;/em&gt; is as expected for the Flatpak.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ virsh pool-dumpxml gnome-boxes
&amp;lt;pool &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dir'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;name&amp;gt;images&amp;lt;/name&amp;gt;
  &amp;lt;uuid&amp;gt;02814071-7a82-4444-80f1-295cfc6f947d&amp;lt;/uuid&amp;gt;
  &amp;lt;capacity &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;1999372288000&amp;lt;/capacity&amp;gt;
  &amp;lt;allocation &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;191017480192&amp;lt;/allocation&amp;gt;
  &amp;lt;available &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;1808354807808&amp;lt;/available&amp;gt;
  &amp;lt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;/source&amp;gt;
  &amp;lt;target&amp;gt;
    &amp;lt;path&amp;gt;/home/jordan/.var/app/org.gnome.Boxes/data/gnome-boxes/images&amp;lt;/path&amp;gt;
    &amp;lt;permissions&amp;gt;
      &amp;lt;mode&amp;gt;0775&amp;lt;/mode&amp;gt;
      &amp;lt;owner&amp;gt;1001&amp;lt;/owner&amp;gt;
      &amp;lt;group&amp;gt;1001&amp;lt;/group&amp;gt;
    &amp;lt;/permissions&amp;gt;
  &amp;lt;/target&amp;gt;
&amp;lt;/pool&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To edit a pool&amp;#8217;s configuration, use the &lt;a href=&quot;https://libvirt.org/manpages/virsh.html#pool-edit&quot;&gt;pool-edit&lt;/a&gt; subcommand.
To modify the Boxes pool, the command would appear as follows.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ virsh pool-edit gnome-boxes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To disable &lt;em&gt;CoW&lt;/em&gt;, set the &lt;em&gt;cow&lt;/em&gt; feature with &lt;code&gt;state=no&lt;/code&gt; in the pool&amp;#8217;s XML.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The snippet here illustrates the necessary XML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;cow&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'no'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Boxes' storage pool, the resulting XML to disable &lt;em&gt;CoW&lt;/em&gt; could appear like so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;pool&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dir'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;gnome-boxes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;uuid&amp;gt;&lt;/span&gt;02814071-7a82-4444-80f1-295cfc6f947d&lt;span class=&quot;nt&quot;&gt;&amp;lt;/uuid&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;capacity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1999372288000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/capacity&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;allocation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;191017480192&lt;span class=&quot;nt&quot;&gt;&amp;lt;/allocation&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;available&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1808354807808&lt;span class=&quot;nt&quot;&gt;&amp;lt;/available&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;cow&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'no'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&amp;gt;&lt;/span&gt;/home/jordan/.var/app/org.gnome.Boxes/data/gnome-boxes/images&lt;span class=&quot;nt&quot;&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;permissions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;mode&amp;gt;&lt;/span&gt;0775&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mode&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;owner&amp;gt;&lt;/span&gt;1001&lt;span class=&quot;nt&quot;&gt;&amp;lt;/owner&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;group&amp;gt;&lt;/span&gt;1001&lt;span class=&quot;nt&quot;&gt;&amp;lt;/group&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/permissions&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pool&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That should be everything you need to get started with GNOME Boxes on a Btrfs filesystem.
Enjoy that simple virtualization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Virtualization" /><category term="Boxes" /><category term="Btrfs" /><category term="elementary" /><category term="GNOME" /><category term="KVM" /><category term="libvirt" /><category term="Linux" /><category term="QEMU" /><category term="Ubuntu" /><category term="virt-manager" /><category term="VM" /><summary type="html">So, you&amp;#8217;ve got libvirt installed on your Linux box and your looking for a simple application for running virtual machines. Look no further than Boxes, so far as it meets your needs, of course. What&amp;#8217;s that you ask? What do you need to figure out to run on this on a Btrfs filesystem? Well, you&amp;#8217;ve come to the right place! This post describes how to install and accommodate Boxes on Btrfs.</summary></entry><entry><title type="html">Install libvirt on elementary OS 5.1</title><link href="https://www.jwillikers.com/install-libvirt-on-elementary-os-5-1" rel="alternate" type="text/html" title="Install libvirt on elementary OS 5.1" /><published>2021-03-03T00:00:00-06:00</published><updated>2021-03-03T00:00:00-06:00</updated><id>https://www.jwillikers.com/Install%20libvirt%20on%20elementary%20OS%205.1</id><content type="html" xml:base="https://www.jwillikers.com/install-libvirt-on-elementary-os-5-1">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to run virtual machines on Linux, chances are you&amp;#8217;re going to use &lt;a href=&quot;https://libvirt.org/&quot;&gt;libvirt&lt;/a&gt;.
I make use of it all the time, especially for testing these blog posts in a clean environment.
libvirt provides a common interface around various underlying tools for virtual machine management.
It not only offers features for guest management but for networking and storage management as well.
It&amp;#8217;s standard XML schema also makes for a powerful and versatile configuration format.
On Linux, libvirt is typically utilizing &lt;a href=&quot;https://www.linux-kvm.org/page/Main_Page&quot;&gt;KVM&lt;/a&gt;, the virtualization layer in the kernel, and, in userspace, &lt;a href=&quot;https://www.qemu.org/&quot;&gt;QEMU&lt;/a&gt;, a generic machine emulator and virtualizer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial provides the necessary steps to verify your system supports hardware virtualization and install libvirt on &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 5.1.
Most of these steps are the same for &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04.
This tutorial takes into account special considerations for systems using the &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; filesystem.
There is also a brief section on installing the graphical user interface for libvirt, &lt;a href=&quot;https://virt-manager.org/&quot;&gt;virt-manager&lt;/a&gt;.
It is assumed that you are familiar with installing software on Ubuntu, using the command-line, and the Btrfs filesystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;check&quot;&gt;Check&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Check that the system supports hardware virtualization.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ egrep &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'(vmx|svm)'&lt;/span&gt; /proc/cpuinfo
8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the output is not zero, then your CPU supports virtualization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the tool for checking that your CPU is compatible with KVM.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cpu-checker&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that the system supports KVM.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ kvm-ok
INFO: /dev/kvm exists
KVM acceleration can be used&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If all checks passed, then you should be able to continue installation of libvirt without issue.
Otherwise, you&amp;#8217;d better switch to some compatible hardware before proceeding.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;If you want to get a more up-to-date virtualization stack, add the &lt;a href=&quot;https://launchpad.net/~jacob/+archive/ubuntu/virtualisation&quot;&gt;virtualization PPA&lt;/a&gt; to your system.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;The software-properties-common package includes a command for easily adding PPA&amp;#8217;s.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; software-properties-common&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;a href=&quot;https://launchpad.net/~jacob/+archive/ubuntu/virtualisation&quot;&gt;virtualization PPA&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository &lt;span class=&quot;nt&quot;&gt;-uy&lt;/span&gt; ppa:jacob/virtualisation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install libvirt.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the current user to the &lt;em&gt;kvm&lt;/em&gt; and &lt;em&gt;libvirt&lt;/em&gt; groups.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; kvm,libvirt &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reload the current user&amp;#8217;s group assignments.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ newgrp -&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;greeter&quot;&gt;Greeter&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On elementary OS 5.1, there&amp;#8217;s a bit of a glitch after installing libvirt on the system.
That is, a new &lt;em&gt;libvirt-qemu&lt;/em&gt; user appears as a logon option in Greeter.
This isn&amp;#8217;t supposed to happen but luckily there&amp;#8217;s a workaround.
The steps here hide the &lt;em&gt;libvirt-qemu&lt;/em&gt; login in Greeter.
The steps were come from &lt;a href=&quot;https://askubuntu.com/a/940069&quot;&gt;this solution&lt;/a&gt; on Stack Overflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Set the libvirt-qemu user account as a system account for the accountsservices package to hide it in the login menu.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[User]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SystemAccount=true&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /var/lib/AccountsService/users/libvirt-qemu&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart the accounts service.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart accounts-daemon.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;btrfs&quot;&gt;Btrfs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use Btrfs on your system like I do, then you&amp;#8217;ll want to avoid &lt;em&gt;CoW&lt;/em&gt; on &lt;em&gt;CoW&lt;/em&gt; when using virtual machine disk images.
Using the default &lt;em&gt;CoW&lt;/em&gt; qcow2 format for virtual disk images on top of a Btrfs filesystem is asking for trouble.
This section demonstrates the various ways of disabling &lt;em&gt;CoW&lt;/em&gt; for virtual disk images on Btrfs filesystems.
If you snapshot your filesystem, take care to place virtual disk images in a subvolume that is excluded from snapshots.
Snapshots for virtual disk images should be handled in the disk image itself as is the case with the &lt;a href=&quot;https://qemu.readthedocs.io/en/latest/system/images.html#cmdoption-image-formats-arg-qcow2&quot;&gt;qcow2&lt;/a&gt; format.
At least, that&amp;#8217;s the way until a Btrfs storage driver appears for libvirt.
I can hope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;qemu_img&quot;&gt;qemu-img&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating a &lt;a href=&quot;https://qemu.readthedocs.io/en/latest/system/images.html#cmdoption-image-formats-arg-qcow2&quot;&gt;qcow2&lt;/a&gt; image directly with &lt;a href=&quot;https://qemu.readthedocs.io/en/latest/tools/qemu-img.html?highlight=qemu-img&quot;&gt;qemu-img(1)&lt;/a&gt;, the &lt;a href=&quot;https://qemu.readthedocs.io/en/latest/system/images.html#cmdoption-qcow2-arg-nocow&quot;&gt;nocow&lt;/a&gt; option can be used to disable &lt;em&gt;CoW&lt;/em&gt; for that file.
The following command creates a 25 gigabyte qcow2 image named &lt;code&gt;my-vm-image.qcow2&lt;/code&gt; with &lt;em&gt;CoW&lt;/em&gt; disabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ qemu-img create &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; nocow my-vm-image.qcow2 25G&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;libvirt_storage_pool_features&quot;&gt;libvirt Storage Pool Features&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.libvirt.org/news.html#v6-6-0-2020-08-02&quot;&gt;libvirt 6.6.0&lt;/a&gt;, &lt;a href=&quot;https://libvirt.org/formatstorage.html#StoragePoolFeatures&quot;&gt;Storage Pool Features&lt;/a&gt; were introduced, including the &lt;em&gt;cow&lt;/em&gt; feature.
This version of libvirt disabled &lt;em&gt;CoW&lt;/em&gt; by default on Btrfs filesystems.
This default behavior was quickly rescinded in &lt;a href=&quot;https://www.libvirt.org/news.html#v6-7-0-2020-09-01&quot;&gt;libvirt 6.7.0&lt;/a&gt; which re-enabled &lt;em&gt;CoW&lt;/em&gt; by default.
The change leaves the decision to disable &lt;em&gt;CoW&lt;/em&gt; in the hands of system administrators.
If your lucky enough to be using libvirt 6.6.0 or newer, you can take advantage of this feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;elementary OS 5.1 and Ubuntu 18.04 only ship with access to libvirt 4.0.0
Even if you use the virtualization PPA, it only goes up to version 4.7.0 for Ubuntu 18.04.
You&amp;#8217;ll need to get newer version by some external means or use a newer version of Ubuntu for this to work.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;libvirt uses the concept of storage pools to abstract the complexities involved in managing the underlying virtual machine disk images in a variety of situations.
I won&amp;#8217;t delve into the details here.
Refer to &lt;a href=&quot;https://libvirt.org/storage.html&quot;&gt;Storage Management&lt;/a&gt; for more information.
For the purposes of this post you should know that libvirt&amp;#8217;s default directory for disk images is its default storage pool.
This pool is a simple &lt;a href=&quot;https://libvirt.org/storage.html#StorageBackendDir&quot;&gt;Directory pool&lt;/a&gt;.
libvirt stores pretty much all configuration in XML files.
This is the case for storage pools and the XML can be viewed and edited with &lt;a href=&quot;https://libvirt.org/manpages/virsh.html&quot;&gt;virsh(1)&lt;/a&gt;.
The steps here walk through the steps to disable &lt;em&gt;CoW&lt;/em&gt; on the default storage pool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;List storage pools with the &lt;a href=&quot;https://libvirt.org/manpages/virsh.html#pool-list&quot;&gt;pool-list&lt;/a&gt; subcommand.
The default pool is just called &lt;em&gt;default&lt;/em&gt;.
No surprises here.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ virsh pool-list
 Name                 State      Autostart
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------&lt;/span&gt;
 default              active     &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To simply view the XML, use the &lt;a href=&quot;https://libvirt.org/manpages/virsh.html#pool-dumpxml&quot;&gt;pool-dumpxml&lt;/a&gt; subcommand followed by the pool&amp;#8217;s name.
Here I output the default pool&amp;#8217;s XML configuration where you can see that &lt;em&gt;path&lt;/em&gt; is indeed &lt;code&gt;/var/lib/libvirt/images&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ virsh pool-dumpxml default
&amp;lt;pool &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dir'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;name&amp;gt;default&amp;lt;/name&amp;gt;
  &amp;lt;uuid&amp;gt;4f779eae-e312-4e4d-bf9f-fafe0e334f63&amp;lt;/uuid&amp;gt;
  &amp;lt;capacity &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;1999372288000&amp;lt;/capacity&amp;gt;
  &amp;lt;allocation &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;191017480192&amp;lt;/allocation&amp;gt;
  &amp;lt;available &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;1808354807808&amp;lt;/available&amp;gt;
  &amp;lt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;/source&amp;gt;
  &amp;lt;target&amp;gt;
    &amp;lt;path&amp;gt;/var/lib/libvirt/images&amp;lt;/path&amp;gt;
    &amp;lt;permissions&amp;gt;
      &amp;lt;mode&amp;gt;0755&amp;lt;/mode&amp;gt;
      &amp;lt;owner&amp;gt;0&amp;lt;/owner&amp;gt;
      &amp;lt;group&amp;gt;0&amp;lt;/group&amp;gt;
    &amp;lt;/permissions&amp;gt;
  &amp;lt;/target&amp;gt;
&amp;lt;/pool&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit a pool&amp;#8217;s configuration with the &lt;a href=&quot;https://libvirt.org/manpages/virsh.html#pool-edit&quot;&gt;pool-edit&lt;/a&gt; subcommand.
To modify the default pool&amp;#8217;s XML, the command would appear as follows.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ virsh pool-edit default&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To disable &lt;em&gt;CoW&lt;/em&gt;, set the &lt;em&gt;cow&lt;/em&gt; feature with &lt;code&gt;state=no&lt;/code&gt; in the pool&amp;#8217;s XML.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The snippet here demonstrates the XML to disable &lt;em&gt;CoW&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;cow&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'no'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the default storage pool, the resulting XML to disable &lt;em&gt;CoW&lt;/em&gt; could appear like so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;pool&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dir'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;default&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;uuid&amp;gt;&lt;/span&gt;4f779eae-e312-4e4d-bf9f-fafe0e334f63&lt;span class=&quot;nt&quot;&gt;&amp;lt;/uuid&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;capacity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1999372288000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/capacity&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;allocation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;191017480192&lt;span class=&quot;nt&quot;&gt;&amp;lt;/allocation&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;available&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1808354807808&lt;span class=&quot;nt&quot;&gt;&amp;lt;/available&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;cow&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'no'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&amp;gt;&lt;/span&gt;/var/lib/libvirt/images&lt;span class=&quot;nt&quot;&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;permissions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;mode&amp;gt;&lt;/span&gt;0755&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mode&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;owner&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/owner&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;group&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/group&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/permissions&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pool&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;chattr&quot;&gt;chattr&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest way to disable &lt;em&gt;CoW&lt;/em&gt; on a particular directory or file is with &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man1/chattr.1.html&quot;&gt;chattr(1)&lt;/a&gt; as described in &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/FAQ#Can_copy-on-write_be_turned_off_for_data_blocks.3F&quot;&gt;Can copy-on-write be turned off for data blocks?&lt;/a&gt;.
To do this, &lt;em&gt;add&lt;/em&gt; the &lt;em&gt;no copy on write&lt;/em&gt; attribute with the &lt;code&gt;+C&lt;/code&gt; option.
The following commands disable &lt;em&gt;CoW&lt;/em&gt; on libvirt&amp;#8217;s image directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Disable &lt;em&gt;CoW&lt;/em&gt; on the &lt;code&gt;/var/lib/libvirt/images&lt;/code&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;chattr +C /var/lib/libvirt/images&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;a_flat_layout_subvolume&quot;&gt;A Flat Layout Subvolume&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A dedicated Btrfs subvolume for &lt;code&gt;/var/lib/libvirt/images&lt;/code&gt; is probably your best option since it excludes the disk images from snapshots.
The subvolume can have &lt;em&gt;CoW&lt;/em&gt; disabled via chattr, but &lt;em&gt;CoW&lt;/em&gt; can also be disabled with the mount option &lt;code&gt;nodatacow&lt;/code&gt; when using a subvolume in a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat&quot;&gt;flat layout&lt;/a&gt;.
The steps here create a dedicated subvolume for libvirt&amp;#8217;s disk image directory and mount it with &lt;em&gt;CoW&lt;/em&gt; disabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Mount the root Btrfs filesystem to create a subvolume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; /mnt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a dedicated Btrfs subvolume for libvirt&amp;#8217;s virtual disk images.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs subvolume create /mnt/var-lib-libvirt-images
Create subvolume &lt;span class=&quot;s1&quot;&gt;'/mnt/var-lib-libvirt-images'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the subvolume to &lt;a href=&quot;http://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; /var/lib/libvirt/images btrfs defaults,nodatacow,noatime,subvol=var-lib-libvirt-images 0 0&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/fstab
/dev/mapper/sda2_crypt /var/lib/libvirt/images btrfs defaults,nodatacow,noatime,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;var-lib-libvirt-images 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify there are no errors in fstab.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;findmnt &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now mount the subvolume according to the rule just added in fstab.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount /var/lib/libvirt/images&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t forget to unmount &lt;code&gt;/mnt&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;umount /mnt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it!
The default storage pool for libvirt will store virtual disk images in this subvolume.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;virt_manager&quot;&gt;virt-manager&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://virt-manager.org/&quot;&gt;virt-manager&lt;/a&gt; is an application for managing virtual machines with libvirt graphically.
It&amp;#8217;s a handy one for the toolbox, though some might prefer the simplicity of &lt;a href=&quot;https://wiki.gnome.org/Apps/Boxes&quot;&gt;Boxes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Install virt-manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;virt-manager&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you haven&amp;#8217;t logged out and back in since installing libvirt, you&amp;#8217;ll need to that before running virt-manager.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now be able to get virtual machines up and running without issue.
Now that you have all the components in place for virtualization, why not make your life easier with &lt;a href=&quot;https://wiki.gnome.org/Apps/Boxes&quot;&gt;Boxes&lt;/a&gt;?
I&amp;#8217;ll cover all the details of installing the GNOME Boxes Flatpak on a Btrfs system in an upcoming post, so stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Virtualization" /><category term="Boxes" /><category term="Btrfs" /><category term="elementary" /><category term="KVM" /><category term="libvirt" /><category term="Linux" /><category term="QEMU" /><category term="systemd" /><category term="Ubuntu" /><category term="virsh" /><category term="virt-manager" /><category term="VM" /><summary type="html">If you want to run virtual machines on Linux, chances are you&amp;#8217;re going to use libvirt. I make use of it all the time, especially for testing these blog posts in a clean environment. libvirt provides a common interface around various underlying tools for virtual machine management. It not only offers features for guest management but for networking and storage management as well. It&amp;#8217;s standard XML schema also makes for a powerful and versatile configuration format. On Linux, libvirt is typically utilizing KVM, the virtualization layer in the kernel, and, in userspace, QEMU, a generic machine emulator and virtualizer.</summary></entry><entry><title type="html">Install Podman on Ubuntu</title><link href="https://www.jwillikers.com/install-podman-on-ubuntu" rel="alternate" type="text/html" title="Install Podman on Ubuntu" /><published>2021-02-28T00:00:00-06:00</published><updated>2021-02-28T00:00:00-06:00</updated><id>https://www.jwillikers.com/Install%20Podman%20on%20Ubuntu</id><content type="html" xml:base="https://www.jwillikers.com/install-podman-on-ubuntu">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt; is a &lt;em&gt;daemonless&lt;/em&gt; container runtime for Linux compatible with &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;.
It offers several advantages over using Docker to manage and run containers.
First, there is no overhead associated with running a background service as is the case with Docker.
Podman also allows users to run &lt;em&gt;rootless&lt;/em&gt; containers which provides a higher degree of protection for the system.
Podman integrates deeply with Linux, taking advantage of a number of specific features.
Notably, it uses namespaces for process isolation and integrates nicely with &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt;.
Just like &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, Podman is built on the concept of &lt;em&gt;pods&lt;/em&gt;, groups of one or more containers, instead of individual containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Podman is only available in the Ubuntu repositories as of &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 20.10, making it just an apt install away.
For older Ubuntu LTS releases, the Kubic PPA can be used to get Podman which is described here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial provides the necessary steps to install Podman on &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 5.1, i.e. &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04, as well as Ubuntu 20.04 proper.
It is assumed that you are familiar with Linux, Ubuntu, and the command-line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Add the Kubic repository for Podman to the system&amp;#8217;s sources list.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Ubuntu 18.04&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Ubuntu 20.04&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import the Kubic repository&amp;#8217;s GPG key.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Ubuntu 18.04&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ wget &lt;span class=&quot;nt&quot;&gt;-qO&lt;/span&gt; - https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/Release.key &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | gpg &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/trusted.gpg.d/kubic_libcontainers.gpg &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Ubuntu 20.04&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ wget &lt;span class=&quot;nt&quot;&gt;-qO&lt;/span&gt; - https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | gpg &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/trusted.gpg.d/kubic_libcontainers.gpg &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refresh Aptitude.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade any installed packages to those from the Kubic repository.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; upgrade&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Podman.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;podman&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Ubuntu 18.04, restart dbus in order to use rootless containers.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; restart dbus&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re using &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; or &lt;a href=&quot;https://openzfs.org/wiki/Main_Page&quot;&gt;ZFS&lt;/a&gt;, now is a good time to switch over to appropriate driver.
Just follow the simple steps in &lt;a href=&quot;podman-with-btrfs-and-zfs.html&quot;&gt;Podman With Btrfs and ZFS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now have the power of Podman available.
When you want to use Podman, just use the same Docker command-line but substitute &lt;code&gt;podman&lt;/code&gt; for &lt;code&gt;docker&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Virtualization" /><category term="Btrfs" /><category term="containers" /><category term="Docker" /><category term="elementary" /><category term="Kubernetes" /><category term="Linux" /><category term="Podman" /><category term="systemd" /><category term="Ubuntu" /><category term="ZFS" /><summary type="html">Podman is a daemonless container runtime for Linux compatible with Docker. It offers several advantages over using Docker to manage and run containers. First, there is no overhead associated with running a background service as is the case with Docker. Podman also allows users to run rootless containers which provides a higher degree of protection for the system. Podman integrates deeply with Linux, taking advantage of a number of specific features. Notably, it uses namespaces for process isolation and integrates nicely with systemd. Just like Kubernetes, Podman is built on the concept of pods, groups of one or more containers, instead of individual containers.</summary></entry><entry><title type="html">Podman With Btrfs and ZFS</title><link href="https://www.jwillikers.com/podman-with-btrfs-and-zfs" rel="alternate" type="text/html" title="Podman With Btrfs and ZFS" /><published>2021-02-28T00:00:00-06:00</published><updated>2021-02-28T00:00:00-06:00</updated><id>https://www.jwillikers.com/Podman%20With%20Btrfs%20and%20ZFS</id><content type="html" xml:base="https://www.jwillikers.com/podman-with-btrfs-and-zfs">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt; has storage backends for both &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; and &lt;a href=&quot;https://openzfs.org/wiki/Main_Page&quot;&gt;ZFS&lt;/a&gt;.
Using these backends allows Podman to take full advantage of the underlying &lt;em&gt;CoW&lt;/em&gt; filesystem.
This is a quick guide on enabling these storage drivers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enable_the_btrfs_and_zfs_storage_drivers_for_podman&quot;&gt;Enable the Btrfs and ZFS Storage Drivers for Podman&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are the necessary steps to enable the &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; and &lt;a href=&quot;https://openzfs.org/wiki/Main_Page&quot;&gt;ZFS&lt;/a&gt; storage drivers.
It is assumed that you are familiar with Linux, Podman, and the command-line and that you&amp;#8217;re running on a Linux system with Podman installed.
Instructions are provided for both rootless and root configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Reset Podman&amp;#8217;s storage with &lt;a href=&quot;https://docs.podman.io/en/latest/markdown/podman-system-reset.1.html&quot;&gt;podman-system-reset(1)&lt;/a&gt; before changing the storage driver.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The storage driver may only be set before initializing Podman.
It can&amp;#8217;t be changed on-the-fly.
This requires removing all storage &lt;em&gt;before&lt;/em&gt; switching the storage driver.
This must be done separately for a user&amp;#8217;s rootless configuration and the root configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will delete all existing containers and images.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;rootless&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ podman system reset&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;root&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;podman system reset&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the storage backend in &lt;a href=&quot;https://github.com/containers/storage/blob/master/docs/containers-storage.conf.5.md&quot;&gt;containers-storage.conf(5)&lt;/a&gt;.
The system configuration file is &lt;code&gt;/etc/containers/storage.conf&lt;/code&gt;.
The driver set here applies to containers run as root.
New rootless configurations will default to it if it is supported.
Only certain drivers are supported for rootless containers.
If the system configuration is set to use a driver not supported in rootless configurations, then the driver will default to the &quot;overlay&quot; driver if available, otherwise it will use the &quot;vfs&quot; driver.
A user&amp;#8217;s rootless configuration in &lt;code&gt;~/.config/containers/storage.conf&lt;/code&gt; supersedes the driver in the system configuration.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;
While the Btrfs driver is supported in rootless configurations, the ZFS driver is not, at this moment.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;rootless&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;When dealing with user configuration, you&amp;#8217;ll need to create the &lt;code&gt;~/.config/containers/&lt;/code&gt; directory first.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.config/container&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;root&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Btrfs&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/containers/storage.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;[storage]&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;btrfs&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Setting the Btrfs driver here sets it as the default for &lt;em&gt;new&lt;/em&gt; rootless configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;ZFS&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/containers/storage.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;[storage]&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;zfs&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Setting the ZFS driver here sets it for root only.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Btrfs&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/containers/storage.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;[storage]&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;btrfs&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;ZFS&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This might work, but I haven&amp;#8217;t tested the ZFS driver for rootless containers.
Mileage may vary.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/containers/storage.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;[storage]&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;zfs&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From here, you can configure various driver-specific options for either Btrfs or ZFS as defined in &lt;a href=&quot;https://github.com/containers/storage/blob/master/docs/containers-storage.conf.5.md&quot;&gt;containers-storage.conf(5)&lt;/a&gt;.
The Btrfs driver doesn&amp;#8217;t have a &lt;code&gt;mountopt&lt;/code&gt; key for controlling mount options.
This owes to the fact that Podman creates Btrfs subvolumes in a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Nested&quot;&gt;nested layout&lt;/a&gt; leading to subvolumes inheriting the mount options of their parent subvolumes.
Since my user&amp;#8217;s home directory is its own top-level subvolume mounted in &lt;a href=&quot;http://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt;, the mount options used for it are inherited by my rootless containers.
These options include &lt;code&gt;autodefrag&lt;/code&gt;, &lt;code&gt;compress=zstd&lt;/code&gt;, and &lt;code&gt;noatime&lt;/code&gt;, all of which I would recommend for your running containers.
You can even go so far as to create dedicated, top-level subvolumes for your root and rootless containers to fine-tune the mount options.
To learn more about Btrfs mount options and layouts, see &lt;a href=&quot;btrfs-mount-options.html&quot;&gt;Btrfs Mount Options&lt;/a&gt; and &lt;a href=&quot;btrfs-layout.html&quot;&gt;Btrfs Layout&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have combined the ultimate powers of Podman and Btrfs or ZFS.
World domination is that much closer.
Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. To be accurate, the user&amp;#8217;s config file is located at &lt;code&gt;$XDG_CONFIG_HOME/containers/storage.conf&lt;/code&gt; when &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; is set but otherwise resides at the aforementioned location.
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="Btrfs" /><category term="containers" /><category term="CoW" /><category term="filesystem" /><category term="Linux" /><category term="Podman" /><category term="ZFS" /><summary type="html">Podman has storage backends for both Btrfs and ZFS. Using these backends allows Podman to take full advantage of the underlying CoW filesystem. This is a quick guide on enabling these storage drivers.</summary></entry><entry><title type="html">Backup Snapper Snapshots With snap-sync</title><link href="https://www.jwillikers.com/backup-snapper-snapshots-with-snap-sync" rel="alternate" type="text/html" title="Backup Snapper Snapshots With snap-sync" /><published>2021-02-27T00:00:00-06:00</published><updated>2021-02-27T00:00:00-06:00</updated><id>https://www.jwillikers.com/Backup%20Snapper%20Snapshots%20With%20snap-sync</id><content type="html" xml:base="https://www.jwillikers.com/backup-snapper-snapshots-with-snap-sync">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;btrfs-snapshot-management-with-snapper.html&quot;&gt;Btrfs Snapshot Management With Snapper&lt;/a&gt;, the process is described for automating &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; snapshots with &lt;a href=&quot;http://snapper.io/&quot;&gt;Snapper&lt;/a&gt;.
Why stop there when you can use these snapshots for incremental backups?
This isn&amp;#8217;t the most difficult thing to script yourself, but why do more work than you have to?
The &lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;Bash&lt;/a&gt; script &lt;a href=&quot;https://github.com/wesbarnett/snap-sync&quot;&gt;snap-sync&lt;/a&gt; makes it easy to incrementally back up Snapper snapshots to another hard drive or a remote machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/digint/btrbk&quot;&gt;Btrbk&lt;/a&gt; already has this capability built-in but Snapper does not, though this may come some day in the future given &lt;a href=&quot;https://github.com/openSUSE/snapper/issues/368&quot;&gt;Snapper issue #368 - Incremental backups&lt;/a&gt;.
If you don&amp;#8217;t need Snapper and want incremental backups of Btrfs snapshots, checkout Btrbk!&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bundled here is a lovely tutorial on how to use snap-sync to backup your Snapper snapshots to an external hard drive.
Building on previous blog posts, this tutorial will demonstrate how to do this at the system level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s assumed that you have a Snapper configuration for the system&amp;#8217;s root filesystem.
If you haven&amp;#8217;t set this up, refer to &lt;a href=&quot;btrfs-snapshot-management-with-snapper.html&quot;&gt;Btrfs Snapshot Management With Snapper&lt;/a&gt;.
You will need a &lt;a href=&quot;https://gitlab.com/cryptsetup/cryptsetup&quot;&gt;Cryptsetup&lt;/a&gt; encrypted volume on an external hard drive.
Backing up to an encrypted volume protects your backups in case something happens to your external drive.
You can setup an encrypted volume on an external hard drive by following the steps in the post &lt;a href=&quot;encrypt-an-external-disk-on-linux.html&quot;&gt;Encrypt an External Disk on Linux&lt;/a&gt;.
Furthermore, this post builds on the work in &lt;a href=&quot;automount-an-encrypted-system-volume.html&quot;&gt;Automount an Encrypted System Volume&lt;/a&gt;, which automates the process of unlocking and mounting the encrypted volume.
For the purposes of this tutorial, we assume the configuration from these previous blog posts.
The encrypted volume on the external hard drive is &lt;code&gt;/dev/sdb1&lt;/code&gt;.
The system is configured to automatically unlock the encrypted volume and mount its Btrfs subvolume &lt;code&gt;root_backups&lt;/code&gt; at &lt;code&gt;/run/media/system/System_Backups&lt;/code&gt;.
It&amp;#8217;s also recommended to mount the Btrfs filesystem with zstd compression and automatic defragmentation.
See &lt;a href=&quot;btrfs-mount-options.html&quot;&gt;Btrfs Mount Options&lt;/a&gt; and &lt;a href=&quot;adjust-mount-options.html&quot;&gt;Adjust Mount Options&lt;/a&gt; for details on the subject.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reference system is &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 5.1 based on &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04.
For this tutorial, you should understand the command-line on Linux, Btrfs, filesystems, Cryptsetup, &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt;, and Snapper.
As a matter of preference, the commands here use the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;'s syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;snap-sync doesn&amp;#8217;t handle cleanup yet so you&amp;#8217;ll have to prune back snapshots on the backup drive yourself for now, or use a more robust tool like &lt;a href=&quot;https://github.com/digint/btrbk&quot;&gt;Btrbk&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Download the latest snap-sync release.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://api.github.com/repos/wesbarnett/snap-sync/releases/latest &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;': '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/browser_download_url/ &amp;amp;&amp;amp; /snap-sync-[0-9]\.[0-9]\.tar\.gz/ \
  {gsub(/&quot;/, &quot;&quot;, $(NF)); system(&quot;wget -qLP ~/Downloads/ &quot; $(NF))}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify the tarball&amp;#8217;s signature.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command here does this with the added convenience of importing the signing key for you if you don&amp;#8217;t already have it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ gpg &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--auto-key-retrieve&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; keyserver.ubuntu.com ~/Downloads/snap-sync-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tar.gz.sig
gpg: assuming signed data &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/home/jordan/Downloads/snap-sync-0.7.tar.gz'&lt;/span&gt;
gpg: Signature made Fri 29 Jan 2021 09:19:24 PM CST
gpg:                using EDDSA key F7B28C61944FE30DABEEB0B01070BCC98C18BD66
gpg: requesting key 1070BCC98C18BD66 from hkp server keyserver.ubuntu.com
gpg: key 1070BCC98C18BD66: 1 signature not checked due to a missing key
gpg: key 1070BCC98C18BD66: 3 signatures reordered
gpg: key 1070BCC98C18BD66: public key &lt;span class=&quot;s2&quot;&gt;&quot;Wes Barnett &amp;lt;wes@barnett.science&amp;gt;&quot;&lt;/span&gt; imported
gpg: marginals needed: 3  completes needed: 1  trust model: pgp
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
gpg: Total number processed: 1
gpg:               imported: 1
gpg: Good signature from &lt;span class=&quot;s2&quot;&gt;&quot;Wes Barnett &amp;lt;wes@barnett.science&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unknown]
gpg:                 aka &lt;span class=&quot;s2&quot;&gt;&quot;Wes Barnett &amp;lt;wes@wbarnett.us&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: F7B2 8C61 944F E30D ABEE  B0B0 1070 BCC9 8C18 BD66&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Good signature&lt;/code&gt; in the output signifies that the signature is indeed valid which indicates that the tarball has not been unduly tampered with.
Assuming, of course, that no unauthorized persons have managed to get their hands on the private signing key.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unpack the tarball.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; ~/Downloads &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; ~/Downloads/snap-sync-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install snap-sync.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; ~/Downloads/snap-sync &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the snap-sync files since they are no longer needed.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ~/Downloads/snap-sync&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plug in the external hard drive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trigger systemd to unlock and mount the encrypted volume.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start run-media-system-System_Backups.mount&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This systemd mount unit comes from the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/fsck.8.html&quot;&gt;fstab(5)&lt;/a&gt; entry added in &lt;a href=&quot;automount-an-encrypted-system-volume.html&quot;&gt;Automount an Encrypted System Volume&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sync the initial snapshot to the external hard drive.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;snap-sync is run manually here because it needs to be configured on the first run of any combination of Snapper config and backup location.
Subsequent runs using the same configuration and destination won&amp;#8217;t require user input, allowing snap-sync to be run as a background service.
The initial sync operation copies the entire root subvolume as part of the first snapshot.
After this, it will only send the data that has changed since the previous sync operation.
Some scripting in the command below determines the UUID of the Btrfs filesystem and the id of the subvolume where backups will stored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap-sync &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; root &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--UUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;blkid &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; value &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; UUID /dev/mapper/backup_crypt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--subvolid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs subvolume show /run/media/system/System_Backups &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;:[ &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]*&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Subvolume ID:/ {gsub(//,&quot;&quot;); print $2}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

snap-sync version 0.7, Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2016-2021 Wes Barnett
snap-sync comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it under certain conditions. See the license &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.


You selected the disk with &lt;span class=&quot;nv&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2eb01d94-9aa1-4bd1-8c99-950be806f449, &lt;span class=&quot;nv&quot;&gt;subvolid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;257.
The disk is mounted at &lt;span class=&quot;s1&quot;&gt;'/run/media/system/System_Backups'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

No backups have been performed &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; on this disk.
Enter name of subvolume to store backups, relative to /run/media/system/System_Backups &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to be created &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;not existing&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
This will be the initial backup &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;snapper configuration &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; to this disk. This could take awhile.
Creating new &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;snapshot &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; configuration...
Will backup //.snapshots/204/snapshot to /run/media/system/System_Backups//root/204//snapshot
Proceed with backup of &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; configuration &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y/n]? y

Performing backups...

Sending first snapshot &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; configuration...
At subvol /.snapshots/204/snapshot
Tagging &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;snapshot as latest backup &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; configuration...

Done!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure a &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;systemd.service&lt;/a&gt; to backup the root filesystem with snap-sync.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/systemd/system/snap-sync-root.service&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Backup Snapper snapshots of the root filesystem
&lt;span class=&quot;nt&quot;&gt;BindsTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;media-run-media-system-System_Backups.mount
&lt;span class=&quot;nt&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;media-run-media-system-System_Backups.mount

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/snap-sync -c root --UUID 2eb01d94-9aa1-4bd1-8c99-950be806f449 --subvolid 257 --noconfirm --quiet&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a fairly straight-forward service unit.
Of note are the &lt;code&gt;BindsTo&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt; keys, which tell systemd that this service should only run while &lt;code&gt;/run/media/system/System_Backups&lt;/code&gt; is mounted.
If you yank the drive&amp;#8217;s connection, the service won&amp;#8217;t keep running.
The &lt;code&gt;UUID&lt;/code&gt; and &lt;code&gt;subvolid&lt;/code&gt;, taken from the output of the initial snap-sync run, are hard-coded here, and all notifications and prompts are disabled.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up a &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.timer.html&quot;&gt;systemd.timer&lt;/a&gt; to run the snap-sync backup service every hour.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/systemd/system/snap-sync-root.timer&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Backup Snapper snapshots of the root filesystem every hour

&lt;span class=&quot;k&quot;&gt;[Timer]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;hourly
&lt;span class=&quot;nt&quot;&gt;AccuracySec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;15min
&lt;span class=&quot;nt&quot;&gt;Persistent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;true

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;timers.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This timer will run the snap-sync systemd service unit configured in the previous step.
It runs every hour within a 15 minute margin according to the value of &lt;code&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.timer.html#AccuracySec=&quot;&gt;AccuracySec&lt;/a&gt;&lt;/code&gt;.
This adds a bit of flexibility for how the timer is scheduled, which can reduce CPU wake-ups and save power.
If the service can&amp;#8217;t be run for any reason when the timer fires, the &lt;code&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.timer.html#Persistent=&quot;&gt;Persistent&lt;/a&gt;&lt;/code&gt; option ensures that the service will be run immediately when next possible.
This comes in handy when backups can&amp;#8217;t happen while the drive is unplugged or the computer is powered down.
Once the drive is plugged in or the computer is booted, the latest snapshot is synced to the backup drive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the timer now and automatically at boot.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; snap-sync-root.timer
Created symlink /etc/systemd/system/timers.target.wants/snap-sync-root.timer → /etc/systemd/system/snap-sync-root.timer.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, feel free to check the status of the timer with &lt;code&gt;systemctl status&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status snap-sync-root.timer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now have examples of everything you need to get up-and-running with automated Btrfs snapshots and backups to an encrypted, external hard drive.
From here, it should be trivial to configure snapshots for more than just the root filesystem.
If you want to configure backups over the network, that shouldn&amp;#8217;t be too hard with snap-sync, either.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="backups" /><category term="Btrbk" /><category term="Btrfs" /><category term="elementary" /><category term="encryption" /><category term="Linux" /><category term="snap-sync" /><category term="Snapper" /><category term="snapshots" /><category term="systemd" /><category term="Ubuntu" /><summary type="html">In Btrfs Snapshot Management With Snapper, the process is described for automating Btrfs snapshots with Snapper. Why stop there when you can use these snapshots for incremental backups? This isn&amp;#8217;t the most difficult thing to script yourself, but why do more work than you have to? The Bash script snap-sync makes it easy to incrementally back up Snapper snapshots to another hard drive or a remote machine.</summary></entry><entry><title type="html">Automount an Encrypted System Volume</title><link href="https://www.jwillikers.com/automount-an-encrypted-system-volume" rel="alternate" type="text/html" title="Automount an Encrypted System Volume" /><published>2021-02-25T00:00:00-06:00</published><updated>2021-02-25T00:00:00-06:00</updated><id>https://www.jwillikers.com/Automount%20an%20Encrypted%20System%20Volume</id><content type="html" xml:base="https://www.jwillikers.com/automount-an-encrypted-system-volume">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you run an encrypted Linux system, it&amp;#8217;s helpful to understand how the system handles mounting and decrypting filesystems.
A Linux desktop user and tinkerer who runs on an encrypted root, might find this knowledge inevitably becomes &lt;em&gt;practical&lt;/em&gt;.
The general mechanics used for an encrypted root volume apply to encrypting other system volumes, such as an external hard drive for secure backups.
While this tutorial won&amp;#8217;t delve in to details specific to mounting an encrypted root filesystem during boot, it does go through everything necessary to automatically mount and decrypt an external hard drive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial provides instructions for automatically mounting and decrypting encrypted filesystem volumes at the system level.
To this end, the tutorial will automate mounting and decrypting a &lt;a href=&quot;https://gitlab.com/cryptsetup/cryptsetup&quot;&gt;Cryptsetup&lt;/a&gt; encrypted volume residing on an external hard drive.
A &lt;a href=&quot;https://gitlab.com/cryptsetup/cryptsetup&quot;&gt;Cryptsetup&lt;/a&gt; encrypted volume on an external hard drive is required for this tutorial.
One can be created by following the instructions in the post &lt;a href=&quot;encrypt-an-external-disk-on-linux.html&quot;&gt;Encrypt an External Disk on Linux&lt;/a&gt;.
This tutorial uses &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; specifically but applies to Linux filesystems in general.
This tutorial assumes familiarity with Linux, the command-line, encryption, systemd, and filesystem mounting.
The commands shown use the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;, so some syntax may be incompatible if you use a different shell.
The reference system is &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 5.1 which is based on &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04.
Let&amp;#8217;s go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Plug in your external drive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Locate the drive&amp;#8217;s device path with &lt;a href=&quot;http://manpages.ubuntu.com/manpages/bionic/en/man8/lsblk.8.html&quot;&gt;lsblk(8)&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk
NAME           MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda              8:0    0   1.8T  0 disk
├─sda1           8:1    0   976M  0 part  /boot
└─sda2           8:2    0   1.8T  0 part
  └─sda2_crypt 253:0    0   1.8T  0 crypt /usr/local
sdb              8:16   0 931.5G  0 disk
└─sdb1           8:17   0 931.5G  0 part  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
sr0             11:0    1  1024M  0 rom&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Yup, that&amp;#8217;s the one.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlock the encrypted volume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cryptsetup open /dev/sdb1 backup_crypt
Enter passphrase &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; /dev/sdb1:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the now decrypted volume.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemd-mount /dev/mapper/backup_crypt
Started unit run-media-system-System_Backups.mount &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mount point: /run/media/system/System_Backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mount point here reflects the label of the Btrfs volume, which is &quot;System Backups&quot; in this case.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Btrfs subvolume to hold backups of the root filesystem.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs subvolume create /run/media/system/System_Backups/root_backups
Create subvolume &lt;span class=&quot;s1&quot;&gt;'/run/media/system/System_Backups/root_backups'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the Btrfs filesystem.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemd-umount /run/media/system/System_Backups
Stopped unit run-media-system-System_Backups.mount &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mount point: /run/media/system/System_Backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the standard systemd directory for Cryptsetup keyfiles exists.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /etc/cryptsetup-keys.d&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This directory is specified in the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-cryptsetup@.service.html&quot;&gt;systemd-cryptsetup@.service&lt;/a&gt; man page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a new keyfile that will be used to decrypt the encrypted volume.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/urandom &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/cryptsetup-keys.d/backup_crypt.key &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1024 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
4+0 records &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;4+0 records out
4096 bytes &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4.1 kB, 4.0 KiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; copied, 0.000453177 s, 9.0 MB/s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The keyfile should be named after the associated volume.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that only &lt;em&gt;root&lt;/em&gt; can read this file.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;0400 /etc/cryptsetup-keys.d/backup_crypt.key&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the keyfile to the device.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cryptsetup luksAddKey /dev/sdb1 /etc/cryptsetup-keys.d/backup_crypt.key
Enter any existing passphrase:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an entry in &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/crypttab.html&quot;&gt;crypttab&lt;/a&gt; for the device.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;backup_crypt UUID=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;blkid &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; value &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; UUID /dev/sdb1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; /etc/cryptsetup-keys.d/backup_crypt.key luks,noauto,nofail,discard&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/crypttab
backup_crypt &lt;span class=&quot;nv&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0cbab673-2b14-40c0-a1f2-522bc7ff7e18 /etc/cryptsetup-keys.d/backup_crypt.key luks,noauto,nofail,discard&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;crypttab is the equivalent of &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt; for encrypted volumes.
The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/crypttab.html#nofail&quot;&gt;nofail&lt;/a&gt; option is necessary if you want your system to be able to boot without the external hard drive attached.
To only decrypt the volume when it&amp;#8217;s required and not at boot or when attached, the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/crypttab.html#noauto&quot;&gt;noauto&lt;/a&gt; option is included.
The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/crypttab.html#discard&quot;&gt;discard&lt;/a&gt; option passes discard requests to the encrypted device, improving performance on SSD&amp;#8217;s but not without its own security implications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;systemd will generate the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-cryptsetup@.service.html&quot;&gt;systemd-cryptsetup@.service&lt;/a&gt; unit &lt;code&gt;systemd-cryptsetup@backup_crypt.service&lt;/code&gt; corresponding to this entry in crypttab.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an entry in &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt; to mount the Btrfs subvolume with the appropriate mount options.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dev/mapper/backup_crypt /run/media/system/System_Backups btrfs defaults,nofail,noauto,x-systemd.automount,noatime,autodefrag,compress=zstd,commit=120,subvol=root_backups 0 0&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/fstab
/dev/mapper/backup_crypt /run/media/system/System_Backups btrfs defaults,nofail,noauto,x-systemd.automount,noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root_backups 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.mount.html#nofail&quot;&gt;nofail&lt;/a&gt; option removes the requirement that the drive be attached at boot time.
With the options &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.mount.html#noauto&quot;&gt;noauto&lt;/a&gt; and &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.mount.html#x-systemd.automount&quot;&gt;x-systemd.automount&lt;/a&gt;, systemd automatically mounts the drive on-demand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;systemd will generate the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.mount.html&quot;&gt;systemd.mount&lt;/a&gt; unit &lt;code&gt;run-media-system-System_Backups.mount&lt;/code&gt; and the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.automount.html&quot;&gt;systemd.automount&lt;/a&gt; unit &lt;code&gt;run-media-system-System_Backups.automount&lt;/code&gt; corresponding to this entry in fstab.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify there aren&amp;#8217;t any errors in fstab.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;findmnt &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;
...
/run/media/system/System_Backups
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; target exists
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; VFS options: noatime
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; FS options: autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root_backups
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; userspace options: nofail,noauto,x-systemd.automount
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /dev/mapper/backup_crypt exists
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; FS &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;is btrfs

0 parse errors, 0 errors, 4 warnings&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lock the encrypted volume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cryptsetup close backup_crypt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reload the changes in fstab and crypttab and generate the corresponding unit files.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart the Cryptsetup target in order to make sure that the volume isn&amp;#8217;t decrypted automatically.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart cryptsetup.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now verify that the encrypted volume has not been decrypted yet.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status systemd-cryptsetup@backup_crypt.service
● systemd-cryptsetup@backup_crypt.service - Cryptography Setup &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;backup_crypt
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/etc/crypttab&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; generated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: inactive &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dead&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cryptsetup unit is marked &lt;em&gt;inactive&lt;/em&gt;, so volume has not been decrypted yet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test that new volume is automatically mounted when accessed by creating a new file under the mount point.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo touch&lt;/span&gt; /run/media/system/System_Backups/file&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now see that the volume has been decrypted because its cryptsetup target is active.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status systemd-cryptsetup@backup_crypt.service
● systemd-cryptsetup@backup_crypt.service - Cryptography Setup &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;backup_crypt
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/etc/crypttab&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; generated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exited&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Thu 2021-02-25 09:38:03 CST&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 44s ago&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also check the status of the Cryptsetup volume using &lt;code&gt;cryptsetup status&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cryptsetup status backup_crypt
/dev/mapper/backup_crypt is active and is &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;use.
  &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;:    LUKS2
  cipher:  aes-xts-plain64
  keysize: 256 bits
  key location: keyring
  device:  /dev/sdb1
  sector size:  512
  offset:  8192 sectors
  size:    1953447903 sectors
  mode:    &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;/write
  flags:   discards&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Likewise, the decrypted Btrfs filesystem has been mounted automatically because its mount unit is now active.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status run-media-system-System_Backups.mount
● run-media-system-System_Backups.mount - /run/media/system/System_Backups
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/etc/fstab&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; generated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mounted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Thu 2021-02-25 09:38:03 CST&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 2min 1s ago
    Where: /run/media/system/System_Backups
     What: /dev/mapper/backup_crypt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now understand the general flow for how systemd manages encrypted filesystems.
Specifically, you learned how to configure an external drive to be decrypted with a keyfile on demand by adding the necessary entries to crypttab and fstab.
You also have an example of what this can look like using Btrfs on the encrypted volume.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="automount" /><category term="Btrfs" /><category term="Cryptsetup" /><category term="crypttab" /><category term="elementary" /><category term="encryption" /><category term="fstab" /><category term="Linux" /><category term="mount" /><category term="systemd" /><category term="Ubuntu" /><summary type="html">If you run an encrypted Linux system, it&amp;#8217;s helpful to understand how the system handles mounting and decrypting filesystems. A Linux desktop user and tinkerer who runs on an encrypted root, might find this knowledge inevitably becomes practical. The general mechanics used for an encrypted root volume apply to encrypting other system volumes, such as an external hard drive for secure backups. While this tutorial won&amp;#8217;t delve in to details specific to mounting an encrypted root filesystem during boot, it does go through everything necessary to automatically mount and decrypt an external hard drive.</summary></entry><entry><title type="html">Install udisks2 From Source</title><link href="https://www.jwillikers.com/install-udisks2-from-source" rel="alternate" type="text/html" title="Install udisks2 From Source" /><published>2021-02-23T00:00:00-06:00</published><updated>2021-02-23T00:00:00-06:00</updated><id>https://www.jwillikers.com/Install%20udisks2%20From%20Source</id><content type="html" xml:base="https://www.jwillikers.com/install-udisks2-from-source">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recently posted &lt;a href=&quot;adjust-mount-options.html&quot;&gt;Adjust Mount Options&lt;/a&gt; which explains in detail how to configure mount options for &lt;a href=&quot;http://storaged.org/doc/udisks2-api/latest/&quot;&gt;udisks2&lt;/a&gt;.
Unfortunately, the reference operating system, &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04, doesn&amp;#8217;t use a new enough version of udisks2.
In fact, even Ubuntu 20.04 doesn&amp;#8217;t contain a new enough version.
So, what should you do if you want to try out these nifty, new features?
Build from source, of course!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial describes how to install both udisks, version 2.9.2, and its dependency &lt;a href=&quot;http://storaged.org/libblockdev/&quot;&gt;libblockdev&lt;/a&gt;, version 2.25, from source on an Ubuntu 18.04 system.
A brief introduction to modifying the global mount options is also included.
For reference, I&amp;#8217;m building on &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 5.1.
I assume you&amp;#8217;re familiar with building and installing software on Linux and udisks2.
The instructions here are intended for the beloved &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt; or &lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;Bash&lt;/a&gt; or &lt;a href=&quot;https://www.zsh.org/&quot;&gt;ZSH&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies required to build libblockdev.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential libbytesize-dev libkeyutils-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libkmod-dev libcryptsetup-dev libglib2.0-dev libgirepository1.0-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libmount-dev libdmraid-dev libndctl-dev libnss3-dev libparted-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libudev-dev libvolume-key-dev libyaml-dev pkg-config&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fetch the latest release tarball from GitHub.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ wget &lt;span class=&quot;nt&quot;&gt;-qO&lt;/span&gt; - https://api.github.com/repos/storaged-project/libblockdev/releases/latest &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;': '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/browser_download_url/ &amp;amp;&amp;amp; /libblockdev-[0-9]+\.[0-9]+\.tar\.gz/ \
  {gsub(/&quot;/, &quot;&quot;, $(NF)); system(&quot;wget -qLP ~/Downloads/ &quot; $(NF))}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the tarball.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; ~/Downloads &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; ~/Downloads/libblockdev-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change to the extracted directory.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads/libblockdev-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prepare the build.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ ./configure&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build libblockdev.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;fish&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;Bash / ZSH&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;➜ make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install libblockdev.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies required to build udisks2.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libacl1-dev libatasmart-dev libgudev-1.0-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libpolkit-agent-1-dev libpolkit-gobject-1-dev libsystemd-dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fetch the latest udisks release from GitHub.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ wget &lt;span class=&quot;nt&quot;&gt;-qO&lt;/span&gt; - https://api.github.com/repos/storaged-project/udisks/releases/latest &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;': '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/browser_download_url/ &amp;amp;&amp;amp; /\.tar\.bz2/ \
  {gsub(/&quot;/, &quot;&quot;, $(NF)); system(&quot;wget -qLP ~/Downloads/ &quot; $(NF))}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the archive.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; ~/Downloads &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; ~/Downloads/udisks-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tar.bz2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change to the extracted directory.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads/udisks-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the build.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ ./configure &lt;span class=&quot;nt&quot;&gt;--enable-btrfs&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--with-systemdsystemunitdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/lib/systemd/system &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--with-udevdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/lib/udev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Installing udisks2 from source installs to the systemd and udev directories in &lt;code&gt;/usr&lt;/code&gt;, overwriting files placed there by your system&amp;#8217;s installation.
To avoid interfering with those, the command here puts these files in their corresponding directories under &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build away.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;fish&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;Bash / ZSH&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;➜ make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install udisks2.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Ubuntu 18.04, symlink the udisks2 udev rules to &lt;code&gt;/etc/udev/rules.d/80-udisks2.rules&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ubuntu 18.04 uses an older version of udev which does not load rules from &lt;code&gt;/usr/local/lib/udev/rules.d/&lt;/code&gt;.
This functions as a workaround and isn&amp;#8217;t necessary for newer Ubuntu LTS releases which support udev rules in &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/lib/udev/rules.d/80-udisks2.rules /etc/udev/rules.d/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the linker&amp;#8217;s cache for the updated libraries now in &lt;code&gt;/usr/local/lib&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ldconfig&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reload the &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt; unit files to refresh the updated udisks2 service unit.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart the udisks2 service unit to load the new version.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart udisks2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cleanup the downloaded source files and residual build artifacts.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ~/Downloads/libblockdev-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ~/Downloads/udisks-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To prefer the newer LUKS2 encryption, change the line &lt;code&gt;encryption=luks1&lt;/code&gt; to &lt;code&gt;encryption=luks2&lt;/code&gt; in the udisks2 configuration file, &lt;code&gt;/usr/local/etc/udisks2/udisks2.conf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mount_options&quot;&gt;Mount Options&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To configure mount options for udisks2, copy the example template to &lt;code&gt;/usr/local/etc/udisks2/mount_options.conf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /usr/local/etc/udisks2/mount_options.conf.example &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  /usr/local/etc/udisks2/mount_options.conf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now modify the configuration file to your liking.
The template includes lots of helpful comments.
I tweak the Btrfs defaults in my configuration shown below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/usr/local/etc/udisks2/mount_options.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;[defaults]
btrfs_defaults=autodefrag,compress=zstd
btrfs_allow=autodefrag,compress,compress-force,datacow,nodatacow,datasum,nodatasum,degraded,device,discard,nodiscard,subvol,subvolid,space_cache&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, &lt;code&gt;autodefrag&lt;/code&gt; is allowed by adding it to the default list of allowed options.
Additionally, automatic defragmentation and zstd compression are enabled by default.
To learn more check the post &lt;a href=&quot;adjust-mount-options.html&quot;&gt;Adjust Mount Options&lt;/a&gt; and the &lt;a href=&quot;http://storaged.org/doc/udisks2-api/latest/mount_options.html&quot;&gt;udisks2 Mount Options&lt;/a&gt; documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s a wrap.
You can now enjoy the new features in udisks2 without having to wait for the next Ubuntu LTS release, 22.04.
Hopefully this doesn&amp;#8217;t break anything.
😅&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="Btrfs" /><category term="elementary" /><category term="Linux" /><category term="mount" /><category term="Ubuntu" /><category term="udisks2" /><summary type="html">I recently posted Adjust Mount Options which explains in detail how to configure mount options for udisks2. Unfortunately, the reference operating system, Ubuntu 18.04, doesn&amp;#8217;t use a new enough version of udisks2. In fact, even Ubuntu 20.04 doesn&amp;#8217;t contain a new enough version. So, what should you do if you want to try out these nifty, new features? Build from source, of course!</summary></entry><entry><title type="html">Adjust Mount Options</title><link href="https://www.jwillikers.com/adjust-mount-options" rel="alternate" type="text/html" title="Adjust Mount Options" /><published>2021-02-22T00:00:00-06:00</published><updated>2021-02-22T00:00:00-06:00</updated><id>https://www.jwillikers.com/Adjust%20Mount%20Options</id><content type="html" xml:base="https://www.jwillikers.com/adjust-mount-options">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mounting filesystems on Linux is simple, right?
Just use &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man8/mount.8.html&quot;&gt;mount(8)&lt;/a&gt;, specify the recurring stuff in &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt;, and everything&amp;#8217;s peachy.
For both better and worse, there&amp;#8217;s more to it than that.
Filesystem dependencies are handled by &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt; and tools like &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/en/man7/udev.7.html&quot;&gt;udev(7)&lt;/a&gt;, &lt;a href=&quot;http://storaged.org/doc/udisks2-api/latest/&quot;&gt;udisks2&lt;/a&gt;, and &lt;a href=&quot;https://developer.gnome.org/gio/stable/&quot;&gt;GIO&lt;/a&gt; provide userspace access to devices.
Imagine not having to be root to access your flash drive?
Okay, you&amp;#8217;re probably aware that root isn&amp;#8217;t necessary for such a thing, but that&amp;#8217;s because there&amp;#8217;s tools that take care of that for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been working through understanding the different components of this for a while now, but recently put most of it together addressing an important concept.
That is mount options.
Switching to &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt; as my default filesystem and using it for my backups, I wanted to improve the default mount options.
And, I wanted do have these defaults applied in userspace, not just in &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt; or when using &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man8/mount.8.html&quot;&gt;mount(8)&lt;/a&gt;.
I&amp;#8217;ve accumulated my knowledge on the subject here and describe exactly how to set Btrfs mount options to your liking, whichever way you might want.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial walks through the menagerie of methods for mounting a Btrfs volume with a specific set of mount options.
The reference operating system is &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04.
It will underscore several available approaches specific to the kernel and userspace levels.
You should have a fairly strong understanding of Linux, the command-line, and filesystems.
I expect you to understand mount options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This walk-through uses a mount point under the standard mount directory for your user.
The mount point is &lt;code&gt;/run/media/$USER/backups&lt;/code&gt;.
This mount point must exist before we begin.
Create this directory as follows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The rest of the tutorial will use &lt;code&gt;$USER&lt;/code&gt; to substitute your username on the command-line.
Command-line output will use my username, &lt;em&gt;jordan&lt;/em&gt;, instead to reflect the output when I run the command.
Your username will appear instead of &lt;em&gt;jordan&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial also uses a USB connected storage device which appears as &lt;code&gt;sdb&lt;/code&gt;.
Your device could be under the same name in the device tree or it might use a different name.
To locate your USB device, examine the output of lsblk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk
NAME           MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda              8:0    0   1.8T  0 disk
├─sda1           8:1    0   976M  0 part  /boot
└─sda2           8:2    0   1.8T  0 part
  └─sda2_crypt 253:0    0   1.8T  0 crypt /opt
sdb              8:16   0 931.5G  0 disk  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
└─sdb1           8:17   0 931.5G  0 part
sr0             11:0    1  1024M  0 rom&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is my 1 TB external hard drive.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The device used in the examples has a single partition, &lt;code&gt;sdb1&lt;/code&gt;, formatted as Btrfs.
If you would like to follow along with your own device, you can format your device as follows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will effectively obfuscate any data on the drive making it very difficult or impossible to recover.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Wipe any existing partition tables on the flash drive and generate a new one.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of &lt;em&gt;gdisk&lt;/em&gt; commands, consisting of &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/cgdisk.8.html&quot;&gt;cgdisk(8)&lt;/a&gt;, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/gdisk.8.html&quot;&gt;gdisk(8)&lt;/a&gt;, and &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/sgdisk.8.html&quot;&gt;sgdisk(8)&lt;/a&gt;, manipulate &lt;a href=&quot;https://en.wikipedia.org/wiki/GUID_Partition_Table&quot;&gt;GUID partition tables&lt;/a&gt;, also known as &lt;em&gt;GPT&lt;/em&gt;'s.
Older {master-boot-records}, &lt;em&gt;MBR&lt;/em&gt;'s, are instead managed with &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/fdisk.8.html&quot;&gt;fdisk(8)&lt;/a&gt; and its similarly named friends.
Here, the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/sgdisk.8.html&quot;&gt;sgdisk(8)&lt;/a&gt; command is used to partition the flash drive using the newer &lt;em&gt;GPT&lt;/em&gt; format without requiring any user interaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sgdisk &lt;span class=&quot;nt&quot;&gt;-Z&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 0:0:0 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 0:&lt;span class=&quot;s2&quot;&gt;&quot;Black WD HDD&quot;&lt;/span&gt; /dev/sdb
GPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
Setting name!
partNum is 0
The operation has completed successfully.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;-Z&lt;/code&gt; flag &lt;em&gt;zaps&lt;/em&gt; any existing MBR and GPT partition tables into oblivion.
Then, the &lt;code&gt;-n&lt;/code&gt; flag creates a new partition given the partition number, starting sector, and ending sector separated by colons.
Zeros used here represent default values.
The first zero sets the partition number to the next available number, which is one since this is the first partition on the flash drive.
The next two zeros designate the starting sector of the largest block and the last sector of that same block, creating a single partition which effectively takes up the entirety of the flash drive.
The &lt;code&gt;-c&lt;/code&gt; flag labels the new partition which is indicated by the &lt;code&gt;0:&lt;/code&gt;.
The label here provides a basic description of the disk.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format the partition with Btrfs.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here I label the volume with a descriptive name of the disk and its purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkfs &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; btrfs &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Black WD EasyStore External HDD - My Backups&quot;&lt;/span&gt; /dev/sdb1
btrfs-progs v4.15.1
See http://btrfs.wiki.kernel.org &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.

Label:              Black WD EasyStore External HDD - My Backups
UUID:               13177899-cb85-45b7-99b6-b76e2fc41f44 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
Node size:          16384
Sector size:        4096
Filesystem size:    931.48GiB
Block group profiles:
  Data:             single            8.00MiB
  Metadata:         DUP               1.00GiB
  System:           DUP               8.00MiB
SSD detected:       no
Incompat features:  extref, skinny-metadata
Number of devices:  1
Devices:
   ID        SIZE  PATH
    1   931.48GiB  /dev/sdb1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Note the &lt;em&gt;UUID&lt;/em&gt; here for use in later examples.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then mount the volume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  /dev/sdb1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a subvolume for storing backups.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs subvolume create /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups/my-backups
Create subvolume &lt;span class=&quot;s1&quot;&gt;'/run/media/jordan/backups/my-backups'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the current user as the owner of the subvolume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups/my-backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Umount the volume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;umount /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you didn&amp;#8217;t note your volume&amp;#8217;s UUID, you can do so with the following command.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk &lt;span class=&quot;nt&quot;&gt;-no&lt;/span&gt; uuid /dev/sdb1
13177899-cb85-45b7-99b6-b76e2fc41f44&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;system_level_mounting&quot;&gt;System-level Mounting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the system-level, the primary ways to management mounts are &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man8/mount.8.html&quot;&gt;mount(8)&lt;/a&gt;, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt;, and &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt;.
Each of these is discussed below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;mount&quot;&gt;mount&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Old faithful and ever present, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man8/mount.8.html&quot;&gt;mount(8)&lt;/a&gt; is ubiquitous.
Use it to mount a filesystem as root giving it a comma-separated list of options preceded by the &lt;code&gt;-o&lt;/code&gt; flag, the device, and the mountpoint.
To mount the Btrfs subvolume named &lt;code&gt;backups&lt;/code&gt; on the block device &lt;code&gt;/dev/sdb1&lt;/code&gt; to &lt;code&gt;/run/media/$USER/backups&lt;/code&gt; with several mount options, use the following command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-backups &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'/dev/disk/by-label/Black\x20WD\x20EasyStore\x20External\x20HDD\x20-\x20My\x20Backups'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To unmount the device, use the umount command with the device path or the path of the mount point.
Here, the previously mounted device is unmounted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;umount /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Easy, right?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;fstab&quot;&gt;fstab&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To automatically mount something, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt; is the de facto standard.
The previous command can be translated to the following entry in fstab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;UUID=13177899-cb85-45b7-99b6-b76e2fc41f44 /run/media/jordan/backups btrfs defaults,nofail,noauto,noatime,autodefrag,compress=zstd,commit=120,subvol=my-backups 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid throwing a wrench in the entire boot process, include the &lt;code&gt;nofail&lt;/code&gt; mount option if this is a removable drive of some kind.
This tells the system it&amp;#8217;s okay if the drive is missing when its booting up.
The &lt;code&gt;defaults&lt;/code&gt; option includes the &lt;code&gt;auto&lt;/code&gt; option which mounts the volume automatically while booting.
Adding the &lt;code&gt;noauto&lt;/code&gt; option disables this.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now this subvolume will be mounted with the appropriate options when the system is booted up.
Or, at least, it should&amp;#8230;&amp;#8203;
Always verify your fstab file after modifying it with &lt;code&gt;findmnt --verify&lt;/code&gt;.
Here I include the &lt;code&gt;--verbose&lt;/code&gt; flag as well and abbreviate the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ findmnt &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;
/
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; target exists
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; VFS options: noatime
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; FS options: autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /dev/mapper/sda2_crypt exists
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;W] cannot detect on-disk filesystem &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;W] recommended root FS passno is 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;current is 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

...

/run/media/jordan/backups
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; target exists
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; VFS options: noatime
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; FS options: autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-backups
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; userspace options: nofail,noauto
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;13177899-cb85-45b7-99b6-b76e2fc41f44 translated to /dev/sdb1
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /dev/sdb1 exists
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;W] cannot detect on-disk filesystem &lt;span class=&quot;nb&quot;&gt;type

&lt;/span&gt;0 parse errors, 0 errors, 17 warnings&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s no errors and the warnings don&amp;#8217;t appear to be anything serious.
Everything should be alright.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously when using the mount command, each mount option had to be specified.
When mounting a matching entry in fstab, the mount options in fstab are applied automatically.
The following command will mount the volume using the mount options specified in fstab for &lt;code&gt;/run/media/$USER/backups&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;systemd&quot;&gt;systemd&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is where things start to get complicated.
systemd handles dependencies among all sorts of services whether that&amp;#8217;s during boot or during runtime.
Some things require mounting filesystems, so systemd exposes an interface for specifying and managing these dependencies.
The primary unit file for this is the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/systemd.mount.5.html&quot;&gt;systemd.mount(5)&lt;/a&gt; unit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A companion unit file type exists &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/systemd.automount.5.html&quot;&gt;systemd.automount(5)&lt;/a&gt; which, if created, controls automatically mounting the mount point.
The automount functionality will automatically mount a volume in an on-demand fashion.
When the volume is first accessed, it is mounted as necessary.
A timeout may be specified to automatically unmount the volume after a period of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An important aspect the mount unit convention is the required naming scheme.
The file names of mount and automount units must correspond to the mount point of where the volume will be mounted.
The file name is appropriately transformed to remove troublesome characters.
Most notably, `/&amp;#8217;s are replaced with `-&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;generated&quot;&gt;Generated&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;systemd integrates nicely enough with fstab such that it automatically generates these mount units from their entries.
Being able to inspect the mount units on a system can come in handy, so here&amp;#8217;s how.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having just edited fstab, systemd will not generate an entry for &lt;code&gt;/run/media/jordan/backups&lt;/code&gt; until the system reboots.
I don&amp;#8217;t want to reboot, so I&amp;#8217;ll just reload the necessary components before examining the generated unit files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Reload systemd.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart the &lt;em&gt;local-fs&lt;/em&gt; target.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart local-fs.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;systemctl&lt;/code&gt; subcommand &lt;code&gt;list-unit-files&lt;/code&gt; and specify the &lt;code&gt;mount&lt;/code&gt; type with the &lt;code&gt;-t&lt;/code&gt; flag to list all mount unit files.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl list-unit-files &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; mount
UNIT FILE                      STATE
-.mount                        generated
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;2esnapshots.mount            generated
boot.mount                     generated
dev-hugepages.mount            static
dev-mqueue.mount               static
home.mount                     generated
run-media-jordan-backups.mount generated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
opt.mount                      generated
proc-sys-fs-binfmt_misc.mount  static
root.mount                     generated
srv.mount                      generated
swap.mount                     generated
sys-fs-fuse-connections.mount  static
sys-kernel-config.mount        static
sys-kernel-debug.mount         static
tmp.mount                      generated
usr-local.mount                generated
var.mount                      generated

18 unit files listed.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The mount unit &lt;code&gt;run-media-jordan-backups.mount&lt;/code&gt; corresponds to the mount point &lt;code&gt;/run/media/jordan/backups&lt;/code&gt; and the corresponding fstab entry added previously.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To view the contents of a mount unit file, pass the name of the unit to &lt;code&gt;systemctl&lt;/code&gt; after the subcommand &lt;code&gt;cat&lt;/code&gt;.
The following command displays the contents of the mount unit file generated for &lt;code&gt;/dev/sdb1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;run-media-&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-backups&lt;/span&gt;.mount
&lt;span class=&quot;c&quot;&gt;# /run/systemd/generator/run-media-jordan-backups.mount&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Automatically generated by systemd-fstab-generator&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;SourcePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/fstab
&lt;span class=&quot;nv&quot;&gt;Documentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;man:fstab&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; man:systemd-fstab-generator&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;local-fs.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Mount]
&lt;span class=&quot;nv&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/run/media/jordan/backups
&lt;span class=&quot;nv&quot;&gt;What&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/disk/by-uuid/13177899-cb85-45b7-99b6-b76e2fc41f44
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;btrfs
&lt;span class=&quot;nv&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;defaults,nofail,noauto,noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/systemd.automount.5.html&quot;&gt;systemd.automount(5)&lt;/a&gt; can be generated automatically for an entry in &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt; by adding the &lt;code&gt;x-systemd.automount&lt;/code&gt; mount option.
You can pair this option with &lt;code&gt;noauto&lt;/code&gt; if you wish to prevent the volume from being mounted automatically at boot.
The &lt;code&gt;x-systemd.idle-timeout&lt;/code&gt; mount option for automount units is handy for specifying how many seconds before an idle drive should be unmounted from the filesystem.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;systemd_mount&quot;&gt;systemd-mount&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mount units can be generated on the fly by mounting volumes with &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-mount.html&quot;&gt;systemd-mount(1)&lt;/a&gt;.
The systemd-mount command to mount &lt;code&gt;/dev/sdb1&lt;/code&gt; with the desired Btrfs options appears suspiciously like the corresponding mount command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemd-mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-backups /dev/sdb1 /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups
Started unit run-media-jordan-backups.mount &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mount point: /run/media/jordan/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s possible to eschew the mount point and let systemd decide where to mount the volume.
By default, this will mount the volume underneath the directory &lt;code&gt;/run/media/system/&amp;lt;label&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is a placeholder for the filesystem label or other identifier.
Mount &lt;code&gt;/dev/sdb1&lt;/code&gt; to the default systemd location as follows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemd-mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-backups /dev/sdb1
Started unit run-media-system-backups.mount &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mount point: /run/media/system/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the &lt;code&gt;-A&lt;/code&gt; flag to generate a corresponding systemd automount unit when mounting a volume.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Likewise, use &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-umount.html&quot;&gt;systemd.mount(5)&lt;/a&gt; to unmount the volume by providing either the device or the path to the mount point.
This command unmounts the device &lt;code&gt;/dev/sdb1&lt;/code&gt; mounted with either or both of the previous two commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemd-umount /dev/sdb1
Stopped unit run-media-system-backups.mount &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mount point: /run/media/system/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;manual&quot;&gt;Manual&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Practically speaking, it shouldn&amp;#8217;t be necessary to create mount units outright.
It&amp;#8217;s still completely possible.
The steps to do so our outlined below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create a mount unit to mount the volume.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/systemd/system/run-media-jordan-backups.mount&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Additional drive

&lt;span class=&quot;k&quot;&gt;[Mount]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;What&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/dev/sdb1
&lt;span class=&quot;nt&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/run/media/jordan/backups
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;btrfs
&lt;span class=&quot;nt&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;defaults,nofail,noauto,noatime,autodefrag,compress=zstd,commit=120,subvol=my-backups

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The name of the mount unit must reflect the path of the mount point.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable the mount unit with &lt;code&gt;systemctl&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;run-media-&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-backups&lt;/span&gt;.mount&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A corresponding automount unit for the mount unit defined above would be as follows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/systemd/system/run-media-jordan-backups.automount&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Automount drive

&lt;span class=&quot;k&quot;&gt;[Automount]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/run/media/jordan/backups

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;usesrpace_mounting&quot;&gt;Usesrpace Mounting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mounting filesystems without root privileges is less straightforward.
While accommodations can be made for mount and systemd offers such functionality, the best tool to use is &lt;a href=&quot;http://storaged.org/doc/udisks2-api/latest/&quot;&gt;udisks2&lt;/a&gt; which ships with most mainstream distributions.
Each of these is discussed below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;mount_2&quot;&gt;mount&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given that fstab contains an entry with the &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;users&lt;/code&gt; mount options, that entry can be mounted by the user without root privileges.
This still requires support from someone with superuser access on the system, which is impractical for those users who just want to be able to mount a flash drive.
This method doesn&amp;#8217;t allow the user to mount the filesystem with any special mount options on the command-line.
Mount options may only be specified within fstab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fstab entry below allows a user to mount &lt;code&gt;/dev/sdb1&lt;/code&gt; to &lt;code&gt;/run/media/$USER/backups&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/fstab&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;/dev/sdb1 /run/media/jordan/backups btrfs defaults,user,nofail,noauto,noatime,autodefrag,compress=zstd,commit=120,subvol=my-backups 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, a user can mount the volume with the device path &lt;em&gt;or&lt;/em&gt; the mount point as done here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ mount /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attempting to provide &lt;em&gt;both&lt;/em&gt; the device and mount point to the mount command as a user will result in an error.
Here mount doesn&amp;#8217;t like the fact that I gave it the device and the mount point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ mount /dev/sdb1 /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups
mount: only root can &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;that&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A user can also unmount the entry they have mounted when it is set with the &lt;code&gt;user&lt;/code&gt; option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ umount /run/media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;code&gt;users&lt;/code&gt; option is provided, it allows any user to unmount the drive regardless of which user mounted it.
This differs from the &lt;code&gt;user&lt;/code&gt; option which only allows the user that mounted the volume to unmount it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;systemd_2&quot;&gt;systemd&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While systemd provides user-level services, including mounting, its abilities are limited to that of the mount command.
And to that end, its practically usesless for userspace mounting.
After trying all sorts of workarounds, the mount command just isn&amp;#8217;t called correctly to allow non-root users the ability to mount filesystems.
A corresponding fstab entry with the &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;users&lt;/code&gt; mount option has no effect.
This is because systemd hard-codes the mount command with both the device and the mount point.
This was shown to end with an error when run as a normal user previously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;only&lt;/em&gt; sensible way to make this possible is by using a {systemd-service} unit rather than a systemd mount unit.
A correctly formed mount command will succeed when executed by the user.
Given the entry for &lt;code&gt;/run/media/jordan/backups&lt;/code&gt; has the &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;users&lt;/code&gt; mount option set in fstab, a user service file to mount it would look like the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/systemd/user/mount-run-media-jordan-backups.service&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Mount my backups

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/bin/mount /run/media/jordan/backups
&lt;span class=&quot;nt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/bin/umount /run/media/jordan/backups
&lt;span class=&quot;nt&quot;&gt;RemainAfterExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;yes

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;default.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;User units are placed in different directories than system units.
The &lt;code&gt;~/.config/systemd/user/&lt;/code&gt; directory is a standard directory for user units.
No root privileges are required to create units here.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To mount the volume, start the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; start mount-run-media-&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-backups&lt;/span&gt;.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unmounting the volume is just a matter of stopping the service.
Do this like so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; stop mount-run-media-&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-backups&lt;/span&gt;.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to mount automatically when logging in, use the &lt;code&gt;enable&lt;/code&gt; subcommand instead of &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;mount-run-media-&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-backups&lt;/span&gt;.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To take this a step, further, it&amp;#8217;s possible to create an instantiable systemd unit.
This is a fancy way of saying that variable information can be provided in the file name after the &lt;code&gt;@&lt;/code&gt; symbol and before the units extension.
This allows creating a single unit file to accommodate a variety of situations.
It effectively introduces a variable which can be used to customize the unit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The previous unit can be made into a generic, instantiable unit which allows mounting a variety of volumes.
Thanks goes to &lt;a href=&quot;https://unix.stackexchange.com/a/316991/395084&quot;&gt;&lt;em&gt;byly&amp;#8217;s&lt;/em&gt; answer&lt;/a&gt; on the &lt;a href=&quot;https://unix.stackexchange.com/&quot;&gt;Unix &amp;amp; Linux Stack Exchange&lt;/a&gt; for introducing me to this nifty approach.
To follow conventions, the unit will mount the volume under &lt;code&gt;/run/media/$USER&lt;/code&gt;.
The mount point will be encoded in the name of the service, i.e. sandwiched between the &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;.service&lt;/code&gt; suffix.
This user service unit, dubbed &lt;code&gt;mount@&lt;/code&gt;, looks like this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/systemd/user/mount@.service&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Mount volumes &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a user which have the &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;user&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; or &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; mount options defined

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/mount /run/media/%u/%I
&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/umount /run/media/%u/%I
&lt;span class=&quot;nv&quot;&gt;RemainAfterExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;default.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This unit uses wildcards, letters prefixed with &lt;code&gt;%&lt;/code&gt;.
Wildcards are substituted with the appropriate information when the unit is enabled.
&lt;code&gt;%u&lt;/code&gt; stands for the username of the user using the unit.
&lt;code&gt;%I&lt;/code&gt; represents the instantiable component provided in the unit&amp;#8217;s name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With superuser access, the file can placed in the directory &lt;code&gt;/etc/systemd/user/&lt;/code&gt; instead of &lt;code&gt;~/.config/systemd/user/&lt;/code&gt; to provide this user service to all users.
Of course, you&amp;#8217;ll probably want to use a path which doesn&amp;#8217;t include the username, &lt;code&gt;/run/media&lt;/code&gt; for instance, if you want to avoid creating an entry for each individual user in fstab.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use the instantiable unit, the directory for the mount point must exist in &lt;code&gt;/run/media/$USER&lt;/code&gt;.
Additionally, an entry in fstab that mounts to that mount point must set the &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;users&lt;/code&gt; mount option.
Given those requirements, use the instantiable service as demonstrated here.
To mount &lt;code&gt;/run/media/run/$USER/backups&lt;/code&gt;, start the service with the name &lt;code&gt;mount@backups&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; start mount@backups.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unmount it by stopping the service of the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; stop mount@backups.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it&amp;#8217;s time to move on to a more practical tool for mounting volumes from userspace.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;udisks2&quot;&gt;udisks2&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a tool for easily mounting volumes in userspace.
It&amp;#8217;s udisks2 and it streamlines userspace mounting and changing up those default mount options.
If you&amp;#8217;re accustomed to a desktop environment on Linux, you&amp;#8217;ve likely benefitted from udisks2.
That&amp;#8217;s because it&amp;#8217;s what graphical applications such as file managers use to mount drives on your behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mounting and unmounting are done with the &lt;code&gt;udisksctl&lt;/code&gt; command.
To mount a volume, use the &lt;code&gt;mount&lt;/code&gt; subcommand.
Unlike the mount program, only the block device is specified.
The mount point is determined by udisks2.
Depending on how udisks2 was compiled, the volume will be mounted in a subdirectory of either be &lt;code&gt;/run/media/&lt;/code&gt; or &lt;code&gt;/media/&lt;/code&gt;.
Use the &lt;code&gt;-b&lt;/code&gt; flag before the block device.
Mount options should be provided as a comma-separated list following the &lt;code&gt;--options&lt;/code&gt; flag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, I mount &lt;code&gt;/dev/sdb1&lt;/code&gt; with specific Btrfs mount options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl mount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1 &lt;span class=&quot;nt&quot;&gt;--options&lt;/span&gt; noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd,commit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-backups
Error mounting /dev/sdb1: GDBus.Error:org.freedesktop.UDisks2.Error.OptionNotPermitted: Mount option &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;autodefrag&lt;span class=&quot;s1&quot;&gt;' is not allowed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Drat.
udisks2 doesn&amp;#8217;t allow the options I want.
In version 2.9.0 of udisks2, a newer version than ships with Ubuntu 18.04, it&amp;#8217;s possible to configure the allowed and default mount options as described in the following sections.
A newer version of udisks2 can be installed on Ubuntu 18.04 by following the instructions in the post &lt;a href=&quot;install-udisks2-from-source.html&quot;&gt;Install udisks2 From Source&lt;/a&gt;.
It turns out the only allowed mount option here is &lt;code&gt;noatime&lt;/code&gt;, so the simpler command below will still mount the volume.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl mount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1 &lt;span class=&quot;nt&quot;&gt;--options&lt;/span&gt; noatime
Mounted /dev/sdb1 at /run/media/jordan/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unmount the volume using the &lt;code&gt;unmount&lt;/code&gt; subcommand followed by the &lt;code&gt;-b&lt;/code&gt; flag and the block device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The subcommand is the word &lt;em&gt;unmount&lt;/em&gt; not &lt;em&gt;umount&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1
Unmounted /dev/sdb1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;changing_the_default_and_allowed_mount_options&quot;&gt;Changing the Default and Allowed Mount Options&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The udisks2 exposes the ability to change the default mount options since version 2.9.0.
Unfortunately, Ubuntu 18.04 doesn&amp;#8217;t ship with a new enough version.
To install a version with these capabilities, follow the instructions in the post &lt;a href=&quot;install-udisks2-from-source.html&quot;&gt;Install udisks2 From Source&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you installed from source into the default destination under &lt;code&gt;/usr/local&lt;/code&gt;, then the configuration file and udev rules will be under &lt;code&gt;/usr/local&lt;/code&gt; instead of &lt;code&gt;/usr&lt;/code&gt;.
Adjust the file paths used in the following examples accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration of mount options udisks2 is done through a global configuration file or udev rules.
Options can be tweaked for specific filesystems, device classes, and individual devices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect5&quot;&gt;
&lt;h6 id=&quot;global_config_file&quot;&gt;Global Config File&lt;/h6&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest way to change the default mount options for all devices is through the global configuration file which lives at &lt;code&gt;/etc/udisks2/mount_options.conf&lt;/code&gt;.
The file uses a simple INI format.
The section &lt;code&gt;[defaults]&lt;/code&gt; contains settings for the default and allowed mount options.
These settings are further divided among default and allowed mount options for all filesystems and for each particular type of filesystem.
The default and allowed options for all filesystems are set with the &lt;code&gt;defaults&lt;/code&gt; and &lt;code&gt;allow&lt;/code&gt; keys respectively.
The filesystem-specific versions of these keys come from prefixing &lt;code&gt;_defaults&lt;/code&gt; and &lt;code&gt;_allow&lt;/code&gt; with the filesystem type used by &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man8/mount.8.html&quot;&gt;mount(8)&lt;/a&gt;, such as &lt;code&gt;vfat&lt;/code&gt;, &lt;code&gt;ntfs&lt;/code&gt;, &lt;code&gt;ext4&lt;/code&gt;, and &lt;code&gt;btrfs&lt;/code&gt;.
Thus, the default mount options for btrfs use the key &lt;code&gt;btrfs_defaults&lt;/code&gt; and the allowed options use the key &lt;code&gt;btrfs_allow&lt;/code&gt;.
The sample configuration here demonstrates how to modify the default and allowed options used for Btrfs.
The other settings are simply the defaults used by udisks2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/udisks2/mount_options.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;nn&quot;&gt;[defaults]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;exec,noexec,nodev,nosuid,atime,noatime,nodiratime,relatime,strictatime,lazytime,ro,rw,sync,dirsync,noload,acl,nosymfollow&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;vfat_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,shortname=mixed,utf8=1,showexec,flush&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;vfat_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,flush,utf8,shortname,umask,dmask,fmask,codepage,iocharset,usefree,showexec&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# common options for both the native kernel driver and exfat-fuse
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;exfat_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,iocharset=utf8,errors=remount-ro&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;exfat_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,dmask,errors,fmask,iocharset,namecase,umask&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;ntfs_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,windows_names&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ntfs_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,umask,dmask,fmask,locale,norecover,ignore_case,windows_names,compression,nocompression,big_writes&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;iso9660_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,iocharset=utf8,mode=0400,dmode=0500&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;iso9660_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,norock,nojoliet,iocharset,mode,dmode&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;udf_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,iocharset=utf8&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;udf_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,iocharset,utf8,umask,mode,dmode,unhide,undelete&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;hfsplus_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,nls=utf8&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;hfsplus_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uid=$UID,gid=$GID,creator,type,umask,session,part,decompose,nodecompose,force,nls&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;btrfs_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;autodefrag,compress=zstd&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;btrfs_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;autodefrag,compress,compress-force,datacow,nodatacow,datasum,nodatasum,degraded,device,discard,nodiscard,subvol,subvolid,space_cache&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;f2fs_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;discard,nodiscard,compress_algorithm,compress_log_size,compress_extension,alloc_mode&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;xfs_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;discard,nodiscard,inode32,largeio,wsync&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;reiserfs_allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hashed_relocation,no_unhashed_relocation,noborder,notail&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, you should start with the default settings stated in the documentation for udisks2&amp;#8217;s &lt;a href=&quot;http://storaged.org/doc/udisks2-api/latest/mount_options.html&quot;&gt;udisks2 Mount Options&lt;/a&gt;.
You&amp;#8217;ll also need to make sure that any default options are specified in the corresponding allowed set.
The Btrfs notably allows the &lt;code&gt;autodefrag&lt;/code&gt; option in addition to the default udisks2 settings and defaults to using it and zstd compression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration file also provides functionality to specify defaults for particular devices.
To do so, a device section named after the block device is followed by the general and filesystem-specific &lt;code&gt;default&lt;/code&gt; keys discussed previously.
Here, the defaults for the vfat filesystem are modified for two devices.
One device is specified by its UUID and another the other by its label.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/udisks2/mount_options.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;nn&quot;&gt;[/dev/disk/by-uuid/13177899-cb85-45b7-99b6-b76e2fc41f44]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;btrfs_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;autodefrag,compress=zstd&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[/dev/disk/by-label/Black\\x20WD\\x20EasyStore\\x20External\\x20HDD\\x20-\\x20My\\x20Backups]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;btrfs_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;autodefrag,compress=zstd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For security reasons, prefer udev rules for setting device-specific mount options.
It&amp;#8217;s easy to falsify the device symlinks used to define the sections.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;udev_rules&quot;&gt;udev Rules&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/en/man7/udev.7.html&quot;&gt;udev(7)&lt;/a&gt; is the subsystem for handling device events on Linux.
It is a robust method for triggering certain actions when devices are detected.
udev rules can be used with udisks2 to specify the allowed or default mount options for specific devices.
This can be for an individual device, a class of devices or some other subset of devices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A system&amp;#8217;s udev rules reside in &lt;em&gt;rules&lt;/em&gt; files in standard directories, such as &lt;code&gt;/etc/udev/rules.d&lt;/code&gt;.
To create a new rule, create a new file in this directory.
udisks2 recommends using the prefix &lt;code&gt;99-&lt;/code&gt; to ensure that the rule runs last.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;udev rules pretty much boil down to matching on a device on certain criteria.
To work with udisks2, there is a required format including a specific header for block devices and a closing &lt;code&gt;LABEL&lt;/code&gt;.
Modifying the mount options is done through a few variables used in the same way as the keys in the configuration file.
The variables are named differently than the keys, but follow the same naming convention.
Defaults are set with the variable &lt;code&gt;UDISKS_MOUNT_OPTIONS_DEFAULTS&lt;/code&gt; and allowed options with &lt;code&gt;UDISKS_MOUNT_OPTIONS_ALLOW&lt;/code&gt;.
Filesystem-specific variables place the filesystem type in all caps in between the &lt;code&gt;UDISKS_MOUNT_OPTIONS&lt;/code&gt; portion at the beginning and the &lt;code&gt;_ALLOW&lt;/code&gt; or &lt;code&gt;_DEFAULTS&lt;/code&gt; part at the end.
Btrfs defaults can be changed by setting the variable &lt;code&gt;UDISKS_MOUNT_OPTIONS_BTRFS_DEFAULTS&lt;/code&gt;.
When setting filesystem-specific options, you should match the rule on the filesystem type provided by the variable &lt;code&gt;ID_FS_TYPE&lt;/code&gt;.
There&amp;#8217;s more to it that that, but this isn&amp;#8217;t supposed to be a udev tutorial so I&amp;#8217;ll show a couple of examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The udev rule here applies specific Btrfs default mount options to all USB devices.
These are the same defaults set above in the global configuration file.
This also mounts USB devices as read-write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/udev/rules.d/99-udisks2-btrfs-usb.rules&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;# Skip if not a block device or if requested by other rules
#
SUBSYSTEM!=&quot;block&quot;, GOTO=&quot;udisks_mount_options_end&quot;
ENV{DM_MULTIPATH_DEVICE_PATH}==&quot;1&quot;, GOTO=&quot;udisks_mount_options_end&quot;
ENV{DM_UDEV_DISABLE_OTHER_RULES_FLAG}==&quot;?*&quot;, GOTO=&quot;udisks_mount_options_end&quot;

# Mount all USB devices read-only
SUBSYSTEMS=&quot;usb&quot;, ENV{ID_FS_USAGE}==&quot;filesystem&quot;, \
    ENV{UDISKS_MOUNT_OPTIONS_DEFAULTS}=&quot;rw&quot;, \
    ENV{ID_FS_TYPE}==&quot;btrfs&quot;, \
    ENV{UDISKS_MOUNT_OPTIONS_BTRFS_DEFAULTS}=&quot;autodefrag,compress=zstd&quot;, \
    ENV{UDISKS_MOUNT_OPTIONS_BTRFS_ALLOW}=&quot;autodefrag,compress,compress-force,datacow,nodatacow,datasum,nodatasum,degraded,device,discard,nodiscard,subvol,subvolid,space_cache&quot;

LABEL=&quot;udisks_mount_options_end&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable a new rule, either reboot your system or reload the udev daemon as demonstrated by the command here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udevadm control &lt;span class=&quot;nt&quot;&gt;--reload-rules&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following rule matches on an exact USB device and applies the same default Btrfs options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/udev/rules.d/99-udisks2-btrfs-backups-usb.rules&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;SUBSYSTEM!=&quot;block&quot;, GOTO=&quot;udisks_mount_options_end&quot;
ENV{DM_MULTIPATH_DEVICE_PATH}==&quot;1&quot;, GOTO=&quot;udisks_mount_options_end&quot;
ENV{DM_UDEV_DISABLE_OTHER_RULES_FLAG}==&quot;?*&quot;, GOTO=&quot;udisks_mount_options_end&quot;

ENV{ID_VENDOR}==&quot;WD&quot;, ENV{ID_MODEL}==&quot;easystore_25FC&quot;, \
    ENV{ID_SERIAL_SHORT}==&quot;000000000000000000000001&quot;, \
    ENV{UDISKS_MOUNT_OPTIONS_DEFAULTS}=&quot;rw&quot;, \
    ENV{UDISKS_MOUNT_OPTIONS_BTRFS_DEFAULTS}=&quot;autodefrag,compress=zstd&quot;,subvol=my-backups, \
    ENV{UDISKS_MOUNT_OPTIONS_BTRFS_ALLOW}=&quot;autodefrag,compress,compress-force,datacow,nodatacow,datasum,nodatasum,degraded,device,discard,nodiscard,subvol,subvolid,space_cache&quot;

LABEL=&quot;udisks_mount_options_end&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To determine the id attributes for your hardware, query the information with udevadm.
Here I filter the output of such a query for &lt;code&gt;/dev/sdb1&lt;/code&gt; to just show the &lt;code&gt;ID_VENDOR&lt;/code&gt;, &lt;code&gt;ID_MODEL&lt;/code&gt;, and &lt;code&gt;ID_SERIAL_SHORT&lt;/code&gt; attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udevadm info &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;all &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/sdb &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'='&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/ID_VENDOR=/ || /ID_MODEL=/ || /ID_SERIAL_SHORT=/ {print $2}'&lt;/span&gt;
WD
easystore_25FC
000000000000000000000001&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more examples and information, refer to the udisks2 documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;gio&quot;&gt;GIO&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.gnome.org/gio/stable/&quot;&gt;GIO&lt;/a&gt; is a filesystem layer abstraction &lt;a href=&quot;https://www.gnome.org/&quot;&gt;GNOME&lt;/a&gt; and &lt;a href=&quot;https://www.gtk.org/&quot;&gt;GTK&lt;/a&gt;.
GTK and GNOME applications use GIO to interact with filesystems.
GIO also bundles a command-line tool which can be used to mount and unmount filesystems.
It can&amp;#8217;t be used to control mount options directly.
However, since it uses udisks2 to mount physical media, default mount options configured for udisks2 carry over.
GIO has the added convenience of being able to unlock and mount an encrypted volume in a single command.
It can also use encryption keys saved in a user&amp;#8217;s keyring to unlock encrypted volumes without requiring a password every time.
Follow the steps below to mount and unmount the &lt;code&gt;/dev/sdb1&lt;/code&gt; volume.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Mount the volume by passing the device to GIO&amp;#8217;s &lt;em&gt;mount&lt;/em&gt; subcommand via the &lt;code&gt;-d&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ gio mount &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/sdb1
Mounted /dev/sdb1 at /run/media/jordan/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the volume with the &lt;em&gt;mount&lt;/em&gt; command, the &lt;code&gt;-u&lt;/code&gt; flag, and the mount point.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ gio mount &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; /run/media/jordan/backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;ve made it this far, you now understand way more about mounting filesystems in Linux then you probably ever wanted too.
You should now know the different ways to control mounting a filesystem whether that&amp;#8217;s as a normal user or as the superuser.
If you&amp;#8217;re using Btrfs, you should now be able to specify those pesky mount options properly now, too.
Interested in mounting encrypted volumes or automatically mounting devices?
Keep an eye on this space for upcoming posts on these topics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="Btrfs" /><category term="elementary" /><category term="fstab" /><category term="GIO" /><category term="Linux" /><category term="mount" /><category term="systemd" /><category term="Ubuntu" /><category term="udev" /><category term="udisks2" /><summary type="html">Mounting filesystems on Linux is simple, right? Just use mount(8), specify the recurring stuff in fstab(5), and everything&amp;#8217;s peachy. For both better and worse, there&amp;#8217;s more to it than that. Filesystem dependencies are handled by systemd and tools like udev(7), udisks2, and GIO provide userspace access to devices. Imagine not having to be root to access your flash drive? Okay, you&amp;#8217;re probably aware that root isn&amp;#8217;t necessary for such a thing, but that&amp;#8217;s because there&amp;#8217;s tools that take care of that for you.</summary></entry><entry><title type="html">Encrypt an External Disk on Linux</title><link href="https://www.jwillikers.com/encrypt-an-external-disk-on-linux" rel="alternate" type="text/html" title="Encrypt an External Disk on Linux" /><published>2021-02-22T00:00:00-06:00</published><updated>2021-02-22T00:00:00-06:00</updated><id>https://www.jwillikers.com/Encrypt%20an%20External%20Disk%20on%20Linux</id><content type="html" xml:base="https://www.jwillikers.com/encrypt-an-external-disk-on-linux">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Encrypting your data is pretty much a must anyone who is privacy or security conscious.
I find it quite handy for not only protecting my data in use, but also the best way to make recycling old disks secure and simple.
I keep local backups on an external hard drive, which I keep encrypted.
Encrypting a drive is pretty easy on Linux, especially with applications like &lt;a href=&quot;https://wiki.gnome.org/Apps/Disks&quot;&gt;GNOME Disks&lt;/a&gt;, which go so far as to make this possible without requiring superuser privileges.
It&amp;#8217;s even pretty straightforward on the command-line, and that&amp;#8217;s what I demonstrate here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial describes the steps necessary to encrypt an external disk, such as a hard drive or flash drive, from the command-line using &lt;a href=&quot;https://gitlab.com/cryptsetup/cryptsetup&quot;&gt;Cryptsetup&lt;/a&gt;.
Instructions for unlocking, mounting, unmounting, and locking the filesystem are provided for Cryptsetup, &lt;a href=&quot;http://storaged.org/doc/udisks2-api/latest/&quot;&gt;udisks2&lt;/a&gt;, and &lt;a href=&quot;https://developer.gnome.org/gio/stable/&quot;&gt;GIO&lt;/a&gt;.
udisks2 allows users to access encrypted filesystems without superuser privileges.
GIO builds on top of udisks2 to simplify mounting and utilize encryption passphrases from the user&amp;#8217;s keyring for convenience.
The encrypted filesystem will use &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;Btrfs&lt;/a&gt;.
The reference operating system is &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04.
Root access on the machine is required.
Knowledge of Linux, filesystems, and the command-line is assumed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the Cryptsetup package.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cryptsetup&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Locate the disk&amp;#8217;s device path.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk
NAME           MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda              8:0    0   1.8T  0 disk
├─sda1           8:1    0   976M  0 part  /boot
└─sda2           8:2    0   1.8T  0 part
  └─sda2_crypt 253:0    0   1.8T  0 crypt /var
sdb              8:16   0 931.5G  0 disk
└─sdb1           8:17   0 931.5G  0 part  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
sr0             11:0    1  1024M  0 rom&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sdb&lt;/code&gt; is the 1 TB external drive I&amp;#8217;m going to encrypt.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your device appears under a different name, use that name instead of &lt;code&gt;sdb&lt;/code&gt; in the following commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overwrite any existing partition tables on the disk with a new one.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following command will effectively obfuscate any data on the drive making it very difficult or impossible to recover.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, I instruct &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/sgdisk.8.html&quot;&gt;sgdisk(8)&lt;/a&gt; to completely destroy any existing partition tables and create a new {GPT} partition table.
The partition table includes a singular partition taking up the entirety of the disk.
A descriptive label, &lt;em&gt;BlackWDExtHDD&lt;/em&gt;, is attached to the partition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sgdisk &lt;span class=&quot;nt&quot;&gt;-Z&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 0:0:0 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 0:&lt;span class=&quot;s2&quot;&gt;&quot;BlackWDExtHDD&quot;&lt;/span&gt; /dev/sdb
GPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
Setting name!
partNum is 0
The operation has completed successfully.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encrypt the partition.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cryptsetup luksFormat &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt; luks2 &lt;span class=&quot;nt&quot;&gt;--label&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Black WD easystore&quot;&lt;/span&gt; /dev/sdb1

WARNING!
&lt;span class=&quot;o&quot;&gt;========&lt;/span&gt;
This will overwrite data on /dev/sdb irrevocably.

Are you sure? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Type uppercase &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: YES
Enter passphrase &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; /dev/sdb:
Verify passphrase:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only versions of Cryptsetup prior to version 2.3.4 need to explicitly specify the type as &lt;code&gt;luks2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the encrypted volume.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;udisks2&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unlock &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1
Passphrase:
Unlocked /dev/sdb1 as /dev/dm-1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;udisks2&amp;#8217;s &lt;code&gt;unlock&lt;/code&gt; subcommand creates a new device in the device tree under &lt;code&gt;/dev/mapper&lt;/code&gt; using the the prefix &lt;code&gt;luks-&lt;/code&gt; followed by the volume&amp;#8217;s UUID.
The device here appears at &lt;code&gt;/dev/mapper/luks-0cbab673-2b14-40c0-a1f2-522bc7ff7e18&lt;/code&gt;.
An additional symlink is created at &lt;code&gt;/dev/dm-1&lt;/code&gt; as mentioned in the command&amp;#8217;s output.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Cryptsetup&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cryptsetup open /dev/sdb1 MyUSB
Enter passphrase &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; /dev/sdb1:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cryptsetup&amp;#8217;s &lt;code&gt;open&lt;/code&gt; subcommand creates a new device in the device tree under &lt;code&gt;/dev/mapper&lt;/code&gt; using the name provided.
In this case, the device appears at &lt;code&gt;/dev/mapper/MyUSB&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Btrfs filesystem on top of the encrypted volume.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;udisks2&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkfs &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; btrfs &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My Backups&quot;&lt;/span&gt; /dev/dm-1
btrfs-progs v4.15.1
See http://btrfs.wiki.kernel.org &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.

Label:              My Backups
UUID:               2eb01d94-9aa1-4bd1-8c99-950be806f449
Node size:          16384
Sector size:        4096
Filesystem size:    931.48GiB
Block group profiles:
  Data:             single            8.00MiB
  Metadata:         DUP               1.00GiB
  System:           DUP               8.00MiB
SSD detected:       no
Incompat features:  extref, skinny-metadata
Number of devices:  1
Devices:
   ID        SIZE  PATH
    1   931.48GiB  /dev/dm-1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Cryptsetup&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkfs &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; btrfs &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My Backups&quot;&lt;/span&gt; /dev/mapper/MyUSB
btrfs-progs v4.15.1
See http://btrfs.wiki.kernel.org &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.

Label:              My Backups
UUID:               2eb01d94-9aa1-4bd1-8c99-950be806f449
Node size:          16384
Sector size:        4096
Filesystem size:    931.48GiB
Block group profiles:
  Data:             single            8.00MiB
  Metadata:         DUP               1.00GiB
  System:           DUP               8.00MiB
SSD detected:       no
Incompat features:  extref, skinny-metadata
Number of devices:  1
Devices:
   ID        SIZE  PATH
    1   931.48GiB  /dev/mapper/MyUSB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now mount the Btrfs volume.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;udisks2&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl mount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/mapper/MyUSB &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; noatime
Mounted /dev/dm-1 at /run/media/jordan/My_Backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To mount with more desirable Btrfs mount options such as &lt;code&gt;autodefrag&lt;/code&gt; and &lt;code&gt;compress=zstd&lt;/code&gt;, a newer version of udisks2 is necessary.
Refer to &lt;a href=&quot;install-udisks2-from-source.html&quot;&gt;Install udisks2 From Source&lt;/a&gt; if you want to install such a version.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Cryptsetup&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemd-mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; noatime,autodefrag,compress&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zstd /dev/mapper/MyUSB
Started unit run-media-system-System_Backups.mount &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mount point: /run/media/system/System_Backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information on mounting, see the post &lt;a href=&quot;adjust-mount-options.html&quot;&gt;Adjust Mount Options&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the Btrfs volume.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;udisks2&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/dm-1
Unmounted /dev/dm-1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Cryptsetup&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemd-umount /run/media/system/My_Backups
Stopped unit run-media-system-System_Backups.mount &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mount point: /run/media/system/System_Backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;close&lt;/code&gt; subcommand to remove the existing device mapping lock the encrypted device.&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;udisks2&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl lock &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1
Locked /dev/sdb1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Cryptsetup&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cryptsetup close MyUSB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gio&quot;&gt;GIO&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.gnome.org/gio/stable/&quot;&gt;GIO&lt;/a&gt; makes accessing encrypted volumes easier.
It handles both unlocking and mounting the encrypted volume in one command.
Plus, it can use an encryption passphrase from the user&amp;#8217;s keyring so that the user doesn&amp;#8217;t have to enter the passphrase ever again.
The following instruction demonstrate how to use GIO to easily access your newly encrypted volume.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Unlock and mount the volume by passing the device to GIO&amp;#8217;s &lt;em&gt;mount&lt;/em&gt; subcommand via the &lt;code&gt;-d&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ gio mount &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/sdb1
Enter a passphrase to unlock the volume
The passphrase is needed to access encrypted data on WD easystore 25FC &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0 TB Hard Disk&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Password:
Mounted /dev/sdb1 at /run/media/jordan/My_Backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount and lock the volume with the &lt;em&gt;mount&lt;/em&gt; command, the &lt;code&gt;-u&lt;/code&gt; flag, and the mount point.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ gio mount &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; /run/media/jordan/My_Backups&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To store the volume&amp;#8217;s passphrase in your keyring, the easiest method is to open the device in the Files application.
This will prompt for a password.
Enter the password and select the desired option for how long to save the password, and that&amp;#8217;s it.
GIO will no longer prompt for a password when opening this drive from the command-line.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now create, open, and close an encrypted partition on Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="backups" /><category term="Btrfs" /><category term="Cryptsetup" /><category term="elementary" /><category term="encryption" /><category term="fstab" /><category term="GIO" /><category term="Linux" /><category term="systemd" /><category term="udisks2" /><category term="Ubuntu" /><summary type="html">Encrypting your data is pretty much a must anyone who is privacy or security conscious. I find it quite handy for not only protecting my data in use, but also the best way to make recycling old disks secure and simple. I keep local backups on an external hard drive, which I keep encrypted. Encrypting a drive is pretty easy on Linux, especially with applications like GNOME Disks, which go so far as to make this possible without requiring superuser privileges. It&amp;#8217;s even pretty straightforward on the command-line, and that&amp;#8217;s what I demonstrate here.</summary></entry></feed>