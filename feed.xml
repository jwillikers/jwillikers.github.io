<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.jwillikers.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.jwillikers.com/" rel="alternate" type="text/html" /><updated>2021-02-15T08:35:43-06:00</updated><id>https://www.jwillikers.com/feed.xml</id><title type="html">JWillikers</title><subtitle>Handy admin and dev guides from my myriad of tinkering</subtitle><author><name>Jordan Williams</name></author><entry><title type="html">Btrfs Layout</title><link href="https://www.jwillikers.com/btrfs-layout" rel="alternate" type="text/html" title="Btrfs Layout" /><published>2021-02-13T00:00:00-06:00</published><updated>2021-02-13T00:00:00-06:00</updated><id>https://www.jwillikers.com/Btrfs%20Layout</id><content type="html" xml:base="https://www.jwillikers.com/btrfs-layout">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the best features of Btrfs is the ability to produce snapshots of data instantaneously.
Rollbacks take advantage of Btrfs to revert the system, or any subvolume, to a previous state like before that major kernel update.
This is an extremely valuable feature.
Unfortunately, to take advantage of a snapshots and rollbacks properly, the filesystem must be layed out intentionally.
Certain directories need to be left alone during a rollback.
You don&amp;#8217;t want to rollback your system and have your hard-work lost nor do you want to inadvertently destroy critical system logs.
Unless your on &lt;a href=&quot;https://www.opensuse.org/&quot;&gt;openSUSE&lt;/a&gt;, this just isn&amp;#8217;t done for you on most popular Linux distributions or at least not yet.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;
Even if you are using openSUSE, it doesn&amp;#8217;t setup user home directory layouts if you wish to snapshot those.
That&amp;#8217;s why I&amp;#8217;ve outlined my Btrfs filesystem configurations for both my system and my home directory here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;subvolumes_and_snapshots&quot;&gt;Subvolumes and Snapshots&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Btrfs uses subvolumes to organize data akin to directories.
Well, subvolumes are directories, practically speaking.
Subvolumes have the added benefit of allowing specific Btrfs characteristics to be applied.
They also provide the only method to exclude data from snapshots.
When taking a snapshot of a particular subvolume, all subvolumes nested within that subvolume are excluded from the snapshot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;system_layout&quot;&gt;System Layout&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best reference for organizing your system&amp;#8217;s subvolumes is openSUSE&amp;#8217;s &lt;a href=&quot;https://en.opensuse.org/SDB:BTRFS#Default_Subvolumes&quot;&gt;Default Subvolumes&lt;/a&gt; documentation.
I diverge from this layout only slightly.
For a complete overview of the various system directories and their purposes, the &lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html&quot;&gt;Filesystem Hierarchy Standard&lt;/a&gt; is your best friend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, my systems keep &lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#bootStaticFilesOfTheBootLoader&quot;&gt;/boot&lt;/a&gt;&lt;/code&gt; on a separate partition so that my root filesystem can be encrypted via LUKS.
In &lt;code&gt;/boot&lt;/code&gt;, the architecture-specific Grub directories are placed in their own subvolumes.
To be explicit these directories are &lt;code&gt;/boot/grub/i386-pc&lt;/code&gt;, &lt;code&gt;/boot/grub/x86_64-efi&lt;/code&gt;, &lt;code&gt;/boot/grub/powerpc-ieee1275&lt;/code&gt;, and &lt;code&gt;/boot/grub/s390x-emu&lt;/code&gt;.
This is a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Nested&quot;&gt;nested layout&lt;/a&gt; for simplicity.
For the root subvolume, I use a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat&quot;&gt;flat layout&lt;/a&gt; which allows me to use different mount options for certain subvolumes and also to provide an obvious map of the filesystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;System Subvolumes&lt;/div&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#purpose2&quot;&gt;/&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The root directory is its own subvolume.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;/.snapshots&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;.snapshots&lt;/code&gt; subvolume will contain snapshots of the root filesystem and including snapshots within snapshots is not a good idea.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#homeUserHomeDirectories&quot;&gt;/home&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The home directories are stored on a separate subvolume to avoid rolling back important user data.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;/home/bob&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Each user&amp;#8217;s home directory is a separate subvolume so that they can be managed separately.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#optAddonApplicationSoftwarePackages&quot;&gt;/opt&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;/opt&lt;/code&gt; directory commonly contains third-party applications which should not be uninstalled during a rollback of the root filesystem.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#rootHomeDirectoryForTheRootUser&quot;&gt;/root&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;/root&lt;/code&gt; directory is really just root user&amp;#8217;s home directory and should be preserved during a rollback just like the other users' home directories.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#srvDataForServicesProvidedBySystem&quot;&gt;/srv&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;/srv&lt;/code&gt; directory contains content for web and FTP servers, so it is excluded from rollbacks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;/swap&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;/swap&lt;/code&gt; subvolume contains the system swapfile which must be excluded from snapshots.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#tmpTemporaryFiles&quot;&gt;/tmp&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It&amp;#8217;s not necessary to save temporary files or caches in snapshots so &lt;code&gt;/tmp&lt;/code&gt; is excluded.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#usrlocalLocalHierarchy&quot;&gt;/usr/local&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;/usr/local&lt;/code&gt; directory is excluded from rollbacks to avoid uninstalling manually installed software.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html#purpose31&quot;&gt;/var&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;/var&lt;/code&gt; directory contains &quot;variable&quot; data which equates to all sorts of things from logs and caches to virtual machine images and databases.
The openSUSE project disables Copy-on-Write on this subvolume by default.
I don&amp;#8217;t because I prefer not to lose compression and checksumming on everything in here, especially for logfiles.
Instead, I disable certain features on subdirectories of &lt;code&gt;/var&lt;/code&gt; where necessary.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;/var/lib/containers&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This is where &lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt; stores its containers, so it is given a dedicated subvolume to allow for rollbacks on this directory.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;/var/lib/libvirt/images&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;/var/lib/libvirt/images&lt;/code&gt; directory is where &lt;a href=&quot;https://libvirt.org/&quot;&gt;libvirt&lt;/a&gt; stores its virtual machine disk images.
This directory has Copy-on-Write disabled by mounting the subvolume with the &lt;code&gt;nodatacow&lt;/code&gt; mount option.
This avoids &lt;em&gt;CoW&lt;/em&gt; on &lt;em&gt;CoW&lt;/em&gt; per the caution in the &lt;a href=&quot;https://wiki.debian.org/Btrfs&quot;&gt;Debian Wiki&amp;#8217;s page on btrfs&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;etcfstab&quot;&gt;&lt;code&gt;/etc/fstab&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example &lt;code&gt;&lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/fsck.8.html&quot;&gt;/etc/fstab&lt;/a&gt;&lt;/code&gt; file is provided here as a reference.
Refer to the post &lt;a href=&quot;btrfs-mount-options.html&quot;&gt;Btrfs Mount Options&lt;/a&gt; for more information about the various mount options and why they are used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/fstab&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;/dev/mapper/sda2_crypt /                       btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=root 0 0
UUID=xxxxxxxxxxxxxxxxx /boot                   btrfs   defaults,noatime,autodefrag,compress=lzo,commit=120 0 0
/dev/mapper/sda2_crypt /.snapshots             btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=snapshots 0 0
/dev/mapper/sda2_crypt /home                   btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=home 0 0
/dev/mapper/sda2_crypt /home/bob               btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=home_bob 0 0
/dev/mapper/sda2_crypt /opt                    btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=opt 0 0
/dev/mapper/sda2_crypt /root                   btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=home_root 0 0
/dev/mapper/sda2_crypt /srv                    btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=srv 0 0
/dev/mapper/sda2_crypt /swap                   btrfs   defaults,noatime,autodefrag,commit=120,subvol=swap 0 0
/dev/mapper/sda2_crypt /tmp                    btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=tmp 0 0
/dev/mapper/sda2_crypt /usr/local              btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=usr_local 0 0
/dev/mapper/sda2_crypt /var                    btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=var 0 0
/dev/mapper/sda2_crypt /var/lib/containers     btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=var 0 0
/dev/mapper/sda2_crypt /var/lib/libvirt/images btrfs   defaults,noatime,nodatacow,commit=120,subvol=var 0 0
/swap/swapfile         none                    swap    defaults 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;user_layout&quot;&gt;User Layout&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user layout has a significant number of directories to exclude from snapshots.
It&amp;#8217;s worth considering an opt-in approach to snapshots as opposed to an opt-out approach for the important data in a user&amp;#8217;s home directory.
Home directory structures can be a bit more chaotic compared to the organization of the system&amp;#8217;s directories and you might find that only snapshotting the necessary directories is the simpler solution.
Here, I discuss the opt-out approach that I chose because this allows me to avoid the hassle of dealing with snapshotting several directories separately.
The user&amp;#8217;s home directory uses a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Nested&quot;&gt;nested layout&lt;/a&gt; in contrast to the system layout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt; and the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/file-hierarchy.html#Home%20Directory&quot;&gt;Home Directory section&lt;/a&gt; from the &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt; &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/file-hierarchy.html&quot;&gt;file-hierarchy(7)&lt;/a&gt; are the best references for the standard directories within a user&amp;#8217;s home directory.
Additionally, my setup must account for per-user &lt;a href=&quot;https://flatpak.org/&quot;&gt;flatpak&lt;/a&gt; and &lt;a href=&quot;https://appimage.org/&quot;&gt;AppImage&lt;/a&gt; applications, local virtual machine disk images, and a host of non-compliant development tooling as well my own development workflow.
I choose to exclude most of these from my home directory snapshots, but you might have good reason to include some of these in your own home directory rollbacks.
Below is a listing of the directories which I separate out into separate subvolumes within my home directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;User Subvolumes&lt;/div&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/file-hierarchy.html#~/.cache/&quot;&gt;.cache&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Local cache files don&amp;#8217;t need to be included in snapshots, so they aren&amp;#8217;t.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;.local&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This directory contains both user-specific data directories, executables, and libraries.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;.local/share/containers/storage/&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Non-root Podman containers are stored in this directory for a particular user so this directory is given a dedicated subvolume in case I want to create snapshots of it at some point in the future.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;.local/share/gnome-boxes/images/&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This directory should have &lt;em&gt;CoW&lt;/em&gt; disabled as it contains virtual machine disk images for GNOME Boxes.
The &lt;code&gt;chattr +C&lt;/code&gt; command can set this on the directory without the need for the mount option and this doesn&amp;#8217;t require it be a separate subvolume within &lt;code&gt;.local&lt;/code&gt;.
I still make it a separate subvolume for good measure.
You would do this like so: &lt;code&gt;chattr +C ~/.local/share/gnome-boxes/images/&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;.snapshots&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The obligatory snapshots directory for the user&amp;#8217;s home directory.
For Snapper, this subvolume must be owned by the root user.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;.var&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Per-user Flatpak installations are kept in &lt;code&gt;.var&lt;/code&gt; and so this entire directory excluded from snapshots.
This is documented in Flatpak&amp;#8217;s documentation &lt;a href=&quot;https://docs.flatpak.org/en/latest/conventions.html?highlight=.var#xdg-base-directories&quot;&gt;here&lt;/a&gt;.
The config files for each application might be valuable, but I prefer to use Git to save these files out-of-band.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;.xdg-non-compliant&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This directory holds everything that violates the XDG specification and should be excluded from snapshots.
This includes various language-specific package managers such as &lt;a href=&quot;https://asdf-vm.com/#/&quot;&gt;asdf&lt;/a&gt;, &lt;a href=&quot;https://doc.rust-lang.org/stable/cargo/&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href=&quot;https://conan.io/&quot;&gt;Conan&lt;/a&gt;.
Their package caches are an obvious and unfortunate source of snapshot bloat.
Creating a subvolume for each one&amp;#8217;s default location is too much work so I configure them to reside in this directory until they are fixed to properly support the XDG Base Directory Specification.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;Applications&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;I use &lt;a href=&quot;https://assassinate-you.net/tags/appimagelauncher/&quot;&gt;AppImageLauncher&lt;/a&gt; to integrate AppImages with my desktop.
These applications are stored in an &lt;code&gt;Applications&lt;/code&gt; directory by default and these shouldn&amp;#8217;t be rolled back with the home directory.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;Downloads&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The &lt;code&gt;Downloads&lt;/code&gt; directory doesn&amp;#8217;t usually contain important files but may contain large files occasionally, so I exclude it from snapshots.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;Projects&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;I use a &lt;code&gt;Projects&lt;/code&gt; directory for pulling down source code and building all sorts of software.
While I take snapshots of this subvolume, the snapshots are kept for much shorter periods of time to avoid filling my disk with old build artifacts.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;code&gt;Projects/.snapshots&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Of course the &lt;code&gt;Projects&lt;/code&gt; subvolume needs its own subvolume dedicated to snapshots.
For Snapper, this subvolume must be owned by the root user.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post has laid out examples of Btrfs filesystem layouts.
You should now have a better grasp of the various considerations in configuring a system with Btrfs.
This includes what directories to exclude from snapshots by making them separate subvolumes and particular edge cases such as disk image storage for virtual machines.
There are also several practical use cases here that can inform you if you have similar circumstances.
Now that the ground-work is complete, next up is configuring system and user snapshots with Snapper!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Ubuntu does this for you with &lt;a href=&quot;https://openzfs.org/wiki/Main_Page&quot;&gt;ZFS&lt;/a&gt; and &lt;a href=&quot;https://github.com/ubuntu/zsys&quot;&gt;ZSYS&lt;/a&gt;, but I&amp;#8217;m talking about Btrfs here.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Have you &lt;em&gt;seen&lt;/em&gt; Inception?
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="appimage" /><category term="appimagelauncher" /><category term="asdf" /><category term="btrfs" /><category term="cow" /><category term="cargo" /><category term="conan" /><category term="elementaryos" /><category term="fhs" /><category term="filesystem" /><category term="flatpak" /><category term="fstab" /><category term="gnome-boxes" /><category term="libvirt" /><category term="linux" /><category term="opensuse" /><category term="podman" /><category term="rust" /><category term="snapper" /><category term="snapshots" /><category term="systemd" /><category term="ubuntu" /><category term="xdg-base" /><summary type="html">One of the best features of Btrfs is the ability to produce snapshots of data instantaneously. Rollbacks take advantage of Btrfs to revert the system, or any subvolume, to a previous state like before that major kernel update. This is an extremely valuable feature. Unfortunately, to take advantage of a snapshots and rollbacks properly, the filesystem must be layed out intentionally. Certain directories need to be left alone during a rollback. You don&amp;#8217;t want to rollback your system and have your hard-work lost nor do you want to inadvertently destroy critical system logs. Unless your on openSUSE, this just isn&amp;#8217;t done for you on most popular Linux distributions or at least not yet.[1] Even if you are using openSUSE, it doesn&amp;#8217;t setup user home directory layouts if you wish to snapshot those. That&amp;#8217;s why I&amp;#8217;ve outlined my Btrfs filesystem configurations for both my system and my home directory here. 1. Ubuntu does this for you with ZFS and ZSYS, but I&amp;#8217;m talking about Btrfs here.</summary></entry><entry><title type="html">Power Management on Linux With TLP</title><link href="https://www.jwillikers.com/power-management-on-linux-with-tlp" rel="alternate" type="text/html" title="Power Management on Linux With TLP" /><published>2021-02-12T00:00:00-06:00</published><updated>2021-02-12T00:00:00-06:00</updated><id>https://www.jwillikers.com/Power%20Management%20on%20Linux%20With%20TLP</id><content type="html" xml:base="https://www.jwillikers.com/power-management-on-linux-with-tlp">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://linrunner.de/tlp/#&quot;&gt;TLP&lt;/a&gt; is a powerful power managmenment utility for Linux.
It helps conserve battery life on mobile Linux devices by taking advantage of various kernel features.
It&amp;#8217;s also super easy to add to a system and requires no extra configuration after installation.
Though, it does expose quite a bit of configuration settings for those who want fine-grained control.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial will get &lt;a href=&quot;https://opensource.org/licenses/gpl-license&quot;&gt;Ubuntu&lt;/a&gt; and derivitives such as &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; setup with TLP.
The instructions use the command-line and software-management utilities built into Ubuntu, so you should be familiar with these tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the necessary package for easily adding PPA&amp;#8217;s.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;software-properties-common&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the TLP PPA to your system to get the latest version of TLP.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-add-repository &lt;span class=&quot;nt&quot;&gt;-uy&lt;/span&gt; ppa:linrunner/tlp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install TLP.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tlp tlp-rdw&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLP will start automatically at boot, but to start it now without rebooting, do so manually.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tlp start&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it.
Really.
If you want to tweak the settings, I recommend checking out the graphical user interface provided by &lt;a href=&quot;https://github.com/d4nj1/TLPUI&quot;&gt;tlpui&lt;/a&gt;.
You now know how to quickly configure better power-savings on your Linux devices.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Systems" /><category term="Btrfs" /><category term="elementaryos" /><category term="linux" /><category term="tlp" /><category term="ubuntu" /><summary type="html">TLP is a powerful power managmenment utility for Linux. It helps conserve battery life on mobile Linux devices by taking advantage of various kernel features. It&amp;#8217;s also super easy to add to a system and requires no extra configuration after installation. Though, it does expose quite a bit of configuration settings for those who want fine-grained control.</summary></entry><entry><title type="html">Btrfs Swapfile</title><link href="https://www.jwillikers.com/btrfs-swapfile" rel="alternate" type="text/html" title="Btrfs Swapfile" /><published>2021-02-11T00:00:00-06:00</published><updated>2021-02-11T00:00:00-06:00</updated><id>https://www.jwillikers.com/Btrfs%20Swapfile</id><content type="html" xml:base="https://www.jwillikers.com/btrfs-swapfile">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Swap space is a standard component of most operating systems.
It&amp;#8217;s effectively reserved disk space for accomodating a system when it needs more RAM than it has available.
I recommend the &lt;a href=&quot;https://opensource.com/&quot;&gt;opensource.com&lt;/a&gt; article &lt;em&gt;&lt;a href=&quot;https://opensource.com/article/18/9/swap-space-linux-systems&quot;&gt;An Introduction to Swap Space on Linux Systems&lt;/a&gt;&lt;/em&gt; as a great primer on the topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two approaches to providing swap space on Linux, swap partitions and &lt;a href=&quot;https://wiki.archlinux.org/index.php/swap#Swap_file&quot;&gt;swapfiles&lt;/a&gt;.
Since version 5.0 of the Linux kernel, Btrfs swap files are supported according to the section &lt;em&gt;&lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/FAQ#Does_btrfs_support_swap_files.3F&quot;&gt;Does btrfs support swap files?&lt;/a&gt;&lt;/em&gt; in the &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/FAQ&quot;&gt;btrfs Wiki FAQ&lt;/a&gt;.
Switching to Btrfs as my default filesystem, I recently set this up have created this tutorial get yourself a swapfile set up on Btrfs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial contains the necessary steps to create a Btrfs swapfile.
The reference system is running &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 5.1 and a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat&quot;&gt;flat btrfs layout&lt;/a&gt;.
As a matter of preference, the commands here use the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;'s syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have not been able to get hibernation working when using a Btrfs swapfile.
You should consider a dedicated, encrypted swap partition if you desire this feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Mount the root Btrfs filesystem to create a subvolume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; /mnt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a dedicated Btrfs subvolume for swap in order to exclude the swapfile from snapshots.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs subvolume create /mnt/swap
Create subvolume &lt;span class=&quot;s1&quot;&gt;'/mnt/swap'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the appropriate permissions on the swap subvolume so that only the owner, the root user in this case, has access to the subvolume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;700 /mnt/swap&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a directory at where the swap subvolume will be mounted.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /swap&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the subvolume to &lt;em&gt;&lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/fsck.8.html&quot;&gt;/etc/fstab&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; /swap btrfs defaults,noatime,subvol=swap 0 0&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/fstab
/dev/mapper/sda2_crypt /swap btrfs defaults,noatime,subvol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;swap 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now mount the swap subvolume according to the rules just add in &lt;code&gt;/etc/fstab&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount /swap&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an empty swapfile within the swap subvolume.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo truncate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 0 /swap/swapfile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable Copy-on-Write for the swapfile.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;chattr +C /swap/swapfile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure to disable compression on the swapfile.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;btrfs property &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; /swap/swapfile compression none&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allocate the file with as much space as there is RAM on the system.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fallocate &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;free &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NR == 2 {print $2}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; /swap/swapfile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only allow access to the swapfile by its owner, the root user, to prevent snooping.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;600 /swap/swapfile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize the swapfile.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkswap /swap/swapfile
Setting up swapspace version 1, size &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 7.8 GiB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8355049472 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
no label, &lt;span class=&quot;nv&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable the swapile!&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;swapon /swap/swapfile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the swapfile to &lt;em&gt;/etc/fstab&lt;/em&gt; so that &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt; will initialize it automatically when booting the system.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/swap/swapfile none swap defaults 0 0&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/fstab&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify there are no errors in &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;findmnt &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set a lower &lt;em&gt;swappiness&lt;/em&gt; in an attempt to improve performance.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is described in the ArchWiki&amp;#8217;s page on Swap in the &lt;em&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/swap#Swappiness&quot;&gt;Swappiness&lt;/a&gt;&lt;/em&gt; section.
A lower setting as used here advises the kernel to avoid swapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;vm.swappiness&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/sysctl.d/99-swappiness.conf
vm.swappiness&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This setting will be applied at the next reboot.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/btrfs#Swap_file&quot;&gt;ArchWiki Btrfs - Swap file&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Swap#Swap_file_creation&quot;&gt;ArchWiki Swap - Swap file creation&lt;/a&gt;
&lt;a href=&quot;https://wiki.debian.org/Swap&quot;&gt;Debian Wiki Swap&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now know all you need to know to make a Btrfs swapfile on Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. For better recommendations on the size of your swapfile, refer to the table &lt;em&gt;Recommended System Swap Space&lt;/em&gt; in the &lt;em&gt;&lt;a href=&quot;https://docs.fedoraproject.org/en-US/fedora/f33/install-guide/install/Installing_Using_Anaconda/#sect-installation-gui-manual-partitioning-recommended&quot;&gt;Recommended Partitioning Scheme&lt;/a&gt;&lt;/em&gt; section of Fedora&amp;#8217;s installation documentation.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. systemd&amp;#8217;s handling of swap is documented thoroughly in the corresponding man page: &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.swap.html&quot;&gt;systemd.swap(5)&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="btrfs" /><category term="linux" /><category term="swap" /><category term="swapfile" /><summary type="html">Swap space is a standard component of most operating systems. It&amp;#8217;s effectively reserved disk space for accomodating a system when it needs more RAM than it has available. I recommend the opensource.com article An Introduction to Swap Space on Linux Systems as a great primer on the topic.</summary></entry><entry><title type="html">Why Choose Btrfs</title><link href="https://www.jwillikers.com/why-choose-btrfs" rel="alternate" type="text/html" title="Why Choose Btrfs" /><published>2021-02-11T00:00:00-06:00</published><updated>2021-02-11T00:00:00-06:00</updated><id>https://www.jwillikers.com/Why%20Choose%20Btrfs</id><content type="html" xml:base="https://www.jwillikers.com/why-choose-btrfs">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many compelling reasons to use a modern &lt;a href=&quot;https://en.wikipedia.org/wiki/Copy-on-write&quot;&gt;Copy-on-Write&lt;/a&gt;, &lt;em&gt;CoW&lt;/em&gt; for short, filesystem.
These include low-cost snapshots and incremental backups.
If that&amp;#8217;s not compelling, the two most popular open source CoW filesystems, &lt;a href=&quot;https://openzfs.org/wiki/Main_Page&quot;&gt;OpenZFS&lt;/a&gt; and &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;btrfs&lt;/a&gt;, offer many more features.
Compression, redundancy, deduplication, native encryption, online defragmentation, and data integrity checking on every read are just a few.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cow&quot;&gt;&lt;em&gt;CoW&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Making a case for &lt;em&gt;CoW&lt;/em&gt; is easy, but why make the change?
Two key features made this change an inevitable one for me: bit rot protection and the ability to perform low-cost, incremental backups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been struck by bit rot on a couple of occasions leaving me with corrupted music files.
Unfortunately at the time, all my previous backups held only the corrupted files so the data was lost.
While this wasn&amp;#8217;t tragic by any means, it still bothered me.
How would I know if a stray bit of radiation fried any of my other files?
Would I notice in time to recover them?
What are the odds of discovering my tax documents are corrupt during an audit by the IRS?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;CoW&lt;/em&gt; solves this problem in two ways.
It will detect such corruption at the time of reading the file or during a &lt;em&gt;scrub&lt;/em&gt;, where all data and metadata is verified against the stored checksums.
In my circumstance, the issue would have been caught much sooner giving me the opportunity to restore the file from a recent backup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To the other point, &lt;em&gt;CoW&lt;/em&gt; provides a robust backup solution through snapshots and incremental sends and receives.
Taking a snapshot of an entire &lt;em&gt;CoW&lt;/em&gt; system is practically no cost.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;
While snapshots shouldn&amp;#8217;t be confused with backups, they provide the foundation for incremental sends and receives.
This allows sending only the changes since the last snapshot to an external disk or offsite backup.
If you want to have fresh backups every ten minutes, no problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cow_filesystems&quot;&gt;&lt;em&gt;CoW&lt;/em&gt; Filesystems&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what filesystem to choose?
If you read much of my blog, you&amp;#8217;ll know that I&amp;#8217;m going to be looking at open source solutions.
This boils down to three serious contenders: OpenZFS, Btrfs, and &lt;a href=&quot;https://bcachefs.org/&quot;&gt;bcachefs&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;openzfs&quot;&gt;OpenZFS&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenZFS has a proven track record of reliability and is by far the most mature candidate.
It also benefits from native encryption, great defaults, and a robust, unified interface.
Unfortunately, its &lt;a href=&quot;https://github.com/openzfs/zfs/blob/master/LICENSE&quot;&gt;CDDL license&lt;/a&gt; is incompatibale with the &lt;a href=&quot;https://opensource.org/licenses/gpl-license&quot;&gt;GPL license&lt;/a&gt; used by the Linux kernel.
This has lead to the need for less-than ideal workarounds.
Unless you&amp;#8217;re on &lt;a href=&quot;https://opensource.org/licenses/gpl-license&quot;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&quot;https://www.freebsd.org/&quot;&gt;FreeBSD&lt;/a&gt;, or &lt;a href=&quot;https://www.netbsd.org/&quot;&gt;NetBSD&lt;/a&gt;.
Ubuntu ships ZFS in its own releases of the Linux kernel.
Both FreeBSD and NetBSD, having a more permissive license, don&amp;#8217;t have issues with the CDDL license.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;btrfs&quot;&gt;Btrfs&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Btrfs is newer but has been around for over a decade at this point.
It&amp;#8217;s suffered from reliability issues in the past and doesn&amp;#8217;t offer native encryption.
It is licensed under the GPL, however, and therefore available in the kernel of every Linux distribution.
Recently, &lt;a href=&quot;https://getfedora.org/&quot;&gt;Fedora&lt;/a&gt; has begun shipping it as the default filesystem and &lt;a href=&quot;https://www.opensuse.org/&quot;&gt;openSUSE&lt;/a&gt; has been using it as the default since 2014.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;bcachefs&quot;&gt;bcachefs&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bcaches is new on the block and not yet mainlined in the Linux kernel.
It does, however, have a promising feature set already and might offer some powerful performance improvements over Btrfs and ZFS.
Time will tell with this one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_choice&quot;&gt;The Choice&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, I have a better familiarity and understanding of ZFS.
That said, its unified approached to filesystem and storage management plus extensive documentation and literature make it very accessible.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As for as operating systems go, I&amp;#8217;m only going to use one of the BSD&amp;#8217;s or Linux wherever I have the choice.
As far as desktops go, Linux has significantly more polish in this respect to the *BSD.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;
I prefer to use &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; as my primary, stable desktop distribution.
I&amp;#8217;m planning on also having a system running Fedora and want to use the same filesystem configuration on both.
The idea of mixing filesystems seems unnecessarily complicated, though completely doable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The prospect of vendor lock-in to Ubuntu ultimately lead me to Btrfs.
I get the freedom of choice in regards to Linux distribution and only have to manage one filesystem on my machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far, I&amp;#8217;m pretty far into configuring my desktops with Btrfs, and I&amp;#8217;m happy with the outcomes.
The default settings had to be tweaked quite a bit and getting all of the tooling in place for snapshot and backup management has been a pain.
More fodder for the blog, though.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Read about the comparison to rsync in the Ars Technica article &lt;a href=&quot;https://arstechnica.com/information-technology/2015/12/rsync-net-zfs-replication-to-the-cloud-is-finally-here-and-its-fast/&quot;&gt;rsync.net: ZFS Replication to the cloud is finally here — and it’s fast&lt;/a&gt;.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Thank you &lt;a href=&quot;https://mwl.io/&quot;&gt;Michael W. Lucas&lt;/a&gt; and &lt;a href=&quot;https://github.com/allanjude&quot;&gt;Allan Jude&lt;/a&gt; for &lt;em&gt;&lt;a href=&quot;https://www.tiltedwindmillpress.com/product/fmzfs/&quot;&gt;FreeBSD Mastery: ZFS&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;https://www.tiltedwindmillpress.com/product/fmaz/&quot;&gt;FreeBSD Mastery: Advanced ZFS&lt;/a&gt;&lt;/em&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. No. I&amp;#8217;m &lt;em&gt;not&lt;/em&gt; counting Darwin.
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="bcachefs" /><category term="btrfs" /><category term="cow" /><category term="filesystem" /><category term="fedora" /><category term="freebsd" /><category term="linux" /><category term="openzfs" /><category term="opensuse" /><category term="netbsd" /><category term="snapshots" /><category term="zfs" /><summary type="html">There are many compelling reasons to use a modern Copy-on-Write, CoW for short, filesystem. These include low-cost snapshots and incremental backups. If that&amp;#8217;s not compelling, the two most popular open source CoW filesystems, OpenZFS and btrfs, offer many more features. Compression, redundancy, deduplication, native encryption, online defragmentation, and data integrity checking on every read are just a few.</summary></entry><entry><title type="html">Btrfs Mount Options</title><link href="https://www.jwillikers.com/btrfs-mount-options" rel="alternate" type="text/html" title="Btrfs Mount Options" /><published>2021-02-10T00:00:00-06:00</published><updated>2021-02-10T00:00:00-06:00</updated><id>https://www.jwillikers.com/Btrfs%20Mount%20Options</id><content type="html" xml:base="https://www.jwillikers.com/btrfs-mount-options">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, let&amp;#8217;s say you&amp;#8217;ve installed a fresh system on &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Main_Page&quot;&gt;btrfs&lt;/a&gt;.
Now what?
Well, Btrfs doesn&amp;#8217;t ship with optimal default settings.
Many popular Linux distributions don&amp;#8217;t improve the situation, either.
That leaves it up to the administrator to fine tune Btrfs for its particular use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary way to tune Btrfs is through &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs(5)#MOUNT_OPTIONS&quot;&gt;mount options&lt;/a&gt; which are commonly enumerated in &lt;code&gt;&lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/fsck.8.html&quot;&gt;/etc/fstab&lt;/a&gt;&lt;/code&gt; for each volume on the system.
I use a flat layout in my &lt;code&gt;/etc/fstab&lt;/code&gt; for the separate Btrfs subvolumes on each system.
Subvolumes within a user&amp;#8217;s home directory, besides perhaps a standard &lt;code&gt;.snapshots&lt;/code&gt; subvolume, are left out of my &lt;code&gt;/etc/fstab&lt;/code&gt; to give users greater flexibility in managing their own home subvolume.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m planning on using Btrfs for all of my Linux machines, but these are all used as desktop computers and the mount options I selected reflect this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fstab&quot;&gt;fstab&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s look at the &lt;code&gt;/etc/fstab&lt;/code&gt; file on one of my machines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/fstab&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;/dev/mapper/sda2_crypt /                    btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=root 0 0
UUID=xxxxxxxxxxxxxxxxx /boot                btrfs   defaults,noatime,autodefrag,compress=lzo,commit=120 0 0
/dev/mapper/sda2_crypt /.snapshots          btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=snapshots 0 0
/dev/mapper/sda2_crypt /home                btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=home 0 0
/dev/mapper/sda2_crypt /home/bob            btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=home_bob 0 0
/dev/mapper/sda2_crypt /home/bob/.snapshots btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=home_bob_snapshots 0 0
/dev/mapper/sda2_crypt /opt                 btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=opt 0 0
/dev/mapper/sda2_crypt /root                btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=home_root 0 0
/dev/mapper/sda2_crypt /srv                 btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=srv 0 0
/dev/mapper/sda2_crypt /swap                btrfs   defaults,noatime,autodefrag,commit=120,subvol=swap 0 0
/dev/mapper/sda2_crypt /tmp                 btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=tmp 0 0
/dev/mapper/sda2_crypt /usr/local           btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=usr_local 0 0
/dev/mapper/sda2_crypt /var                 btrfs   defaults,noatime,autodefrag,compress=zstd,commit=120,subvol=var 0 0
/swap/swapfile         none                 swap    defaults 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wow, there&amp;#8217;s a bunch going on here!
This setup contains many separate subvolumes to facilitate snapshots of the root directory and users' home directories.
It also includes a &lt;a href=&quot;btrfs-swapfile.html&quot;&gt;Btrfs Swapfile&lt;/a&gt;.
These aspects of the file will be discussed in future posts. 😉&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that each subvolume specified here, except for &lt;code&gt;/boot&lt;/code&gt;, explicitly states the mount options.
These subvolumes use a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat&quot;&gt;flat layout&lt;/a&gt; as opposed to a &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Nested&quot;&gt;nested layout&lt;/a&gt;.
With the exception of the &lt;code&gt;/boot&lt;/code&gt; subvolume which resides on a separate partition, they are all located at the root of &lt;code&gt;/dev/mapper/sda2_crypt&lt;/code&gt;.
When using Btrfs, nested subvolumes inherit the mount options of their parents and are automatically mounted.
They don&amp;#8217;t need to be included in &lt;code&gt;/etc/fstab&lt;/code&gt; but they are restricted to using the exact mount options of their parents.
The &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat&quot;&gt;flat layout&lt;/a&gt; used here has the advantage of making it easy to view how system subvolumes are organized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since Btrfs does it&amp;#8217;s own integrity checking, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/fsck.8.html&quot;&gt;fsck&lt;/a&gt; should be disabled.
The integer in the last column of each row indicates the fsck value and setting it to zero disables fsck.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mount_options&quot;&gt;Mount Options&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Listed below are descriptions of each particular mount option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Mount Options&lt;/div&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;defaults&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Use default options: &lt;em&gt;rw&lt;/em&gt;, &lt;em&gt;suid&lt;/em&gt;, &lt;em&gt;dev&lt;/em&gt;, &lt;em&gt;exec&lt;/em&gt;, &lt;em&gt;auto&lt;/em&gt;, &lt;em&gt;nouser&lt;/em&gt;, and &lt;em&gt;async&lt;/em&gt;.
These are not Btrfs-specific.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;noatime&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Do  not  update  inode  access  times  on  this  filesystem.
This speeds up reads since the access time metadata is not updated.
This option isn&amp;#8217;t specific to Btrfs either.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;autodefrag&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enable automatic file defragmentation.
This automatically defragments small random writes into files.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;compress&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Filesystem-level compression is a beautiful thing.
It increases read and write speeds while saving disk space.
The speed of &lt;em&gt;&lt;a href=&quot;https://facebook.github.io/zstd/&quot;&gt;zstd&lt;/a&gt;&lt;/em&gt; compression makes it my general preference.
The &lt;code&gt;/boot&lt;/code&gt; subvolume above is mounted with &lt;em&gt;lzo&lt;/em&gt; compression to accomodate an older version of Grub predating &lt;em&gt;zstd&lt;/em&gt; support, which appeared in Grub 2.04.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;commit&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The number of seconds between periodic commits to the filesystem.
This is 30 seconds by default.
Increasing this value reduces the frequency of periodic writes which can reduce wear on the disk.
However, this also increases the risk of data loss during the event of an untimely crash.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;em&gt;subvol&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Mount the subvolume from the given path rather than the top-level subvolume.
This option is organizational and used for the &lt;a href=&quot;https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat&quot;&gt;flat layout&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;ssd&lt;/em&gt; option is omitted since these settings are applied automatically when the underying storage media is solid-state.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hopefully you have a better idea of some of the available mount options for optimizing Btrfs for your particular use case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="btrfs" /><category term="fstab" /><category term="Linux" /><category term="mount" /><summary type="html">So, let&amp;#8217;s say you&amp;#8217;ve installed a fresh system on btrfs. Now what? Well, Btrfs doesn&amp;#8217;t ship with optimal default settings. Many popular Linux distributions don&amp;#8217;t improve the situation, either. That leaves it up to the administrator to fine tune Btrfs for its particular use case.</summary></entry><entry><title type="html">GNOME Keyring in KDE Plasma</title><link href="https://www.jwillikers.com/gnome-keyring-in-kde-plasma" rel="alternate" type="text/html" title="GNOME Keyring in KDE Plasma" /><published>2021-01-01T00:00:00-06:00</published><updated>2021-01-01T00:00:00-06:00</updated><id>https://www.jwillikers.com/GNOME%20Keyring%20in%20KDE%20Plasma</id><content type="html" xml:base="https://www.jwillikers.com/gnome-keyring-in-kde-plasma">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I love &lt;a href=&quot;https://www.gnome.org/&quot;&gt;GNOME&lt;/a&gt;, but on my &lt;a href=&quot;https://www.pine64.org/pinebook-pro/&quot;&gt;Pinebook Pro&lt;/a&gt;, I use the extremely well-supported &lt;a href=&quot;https://manjaro.org/download/#pinebook-pro-kde-plasma&quot;&gt;Manjaro Pinebook Pro KDE Plasma edition&lt;/a&gt;.
One of the biggest gripes I have with &lt;a href=&quot;https://kde.org/plasma-desktop/&quot;&gt;KDE Plasma&lt;/a&gt; is that it doesn&amp;#8217;t automatically manage my &lt;a href=&quot;https://www.openssh.com/&quot;&gt;OpenSSH&lt;/a&gt; and &lt;a href=&quot;https://gnupg.org/&quot;&gt;GPG&lt;/a&gt; keys.
I&amp;#8217;m used to having my SSH and GPG key unlocked automatically when I login in.
As a developer who uses these constantly, this is very convenient.
KDE Plasma works very well on the Pinebook Pro, but this is one feature I just had to figure out.
While I attempted to make this work with &lt;a href=&quot;https://github.com/KDE/kwallet&quot;&gt;KWallet&lt;/a&gt;, I gave up and switched to using &lt;a href=&quot;https://wiki.gnome.org/Projects/GnomeKeyring&quot;&gt;GNOME Keyring&lt;/a&gt;.
If you wish to obtain this convenience within KDE then read on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial describes how to enable GNOME Keyring within Manjaro KDE to automically unlock your keyring, including SSH and GPG keys on login.
For reference, this tutorial uses &lt;a href=&quot;https://manjaro.org/download/#pinebook-pro-kde-plasma&quot;&gt;Manjaro Pinebook Pro KDE Plasma edition&lt;/a&gt; version 20.12.
This tutorial provides instructions specific to the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish&lt;/a&gt; shell.
Most of the steps here were taken directly from the &lt;a href=&quot;https://wiki.archlinux.org/index.php/GNOME/Keyring&quot;&gt;Arch Wiki&amp;#8217;s GNOME/Keyring page&lt;/a&gt;.
Refer there for more information.
You should be familiar with Manjaro, KDE Plasma, and the fish shell to get the most out of this tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install GNOME Keyring.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; gnome-keyring&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, install the graphical &lt;a href=&quot;https://wiki.gnome.org/Apps/Seahorse&quot;&gt;Seahorse&lt;/a&gt; application to help manage your GNOME Keyring.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; seahorse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the GNOME Keyring&amp;#8217;s PAM module to &lt;code&gt;/etc/pam.d/login&lt;/code&gt; to unlock the GNOME Keyring on login.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/pam.d/login&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;#%PAM-1.0

auth       required     pam_securetty.so
auth       requisite    pam_nologin.so
auth       include      system-local-login
auth       optional     pam_gnome_keyring.so &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
account    include      system-local-login
session    include      system-local-login
session    optional     pam_gnome_keyring.so auto_start &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the &lt;code&gt;auth&lt;/code&gt; type here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;And add the &lt;code&gt;session&lt;/code&gt; type here.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For this to work, your keyring must use the same password you use to login.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Autostart SSH and Secrets components of the GNOME keyring on login by copying their autostart files to your &lt;code&gt;~/.config/autostart&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /etc/xdg/autostart/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;gnome-keyring-secrets.desktop,gnome-keyring-ssh.desktop&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; ~/.config/autostart/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strip out the &lt;code&gt;OnlyShowIn&lt;/code&gt; line from the autostart file for the Secrets component.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/^OnlyShowIn.*$/d'&lt;/span&gt; ~/.config/autostart/gnome-keyring-secrets.desktop&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also strip out the &lt;code&gt;OnlyShowIn&lt;/code&gt; line from the autostart file for the SSH component.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/^OnlyShowIn.*$/d'&lt;/span&gt; ~/.config/autostart/gnome-keyring-ssh.desktop&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the &lt;code&gt;conf.d&lt;/code&gt; configuration directory for fish startup scripts in order to keep things tidy.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/.config/fish/conf.d&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export the &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; environment variable to GNOME Keyring&amp;#8217;s ssh-agent in a shell startup file to make it available in your terminal.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/fish/conf.d/gnome-keyring-ssh-agent.fish&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESKTOP_SESSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gnome-keyring-daemon &lt;span class=&quot;nt&quot;&gt;--start&lt;/span&gt; | string &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure GnuPG to use GNOME Keyring to manage passphrase prompts.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.gnupg/gpg-agent.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;pinentry-program /usr/bin/pinentry-gnome3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log out and log back in for the changes to take effect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked to unlock your SSH and GPG keys, select the option to save them to your keyring and they&amp;#8217;ll be available for you on subsequent logins!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now be able to have your GPG and SSH keys unlocked automatically when you login to your KDE environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Developer" /><category term="GNOME" /><category term="GPG" /><category term="KDE" /><category term="Keyring" /><category term="Manjaro" /><category term="PinebookPro" /><category term="Plasma" /><category term="SSH" /><summary type="html">I love GNOME, but on my Pinebook Pro, I use the extremely well-supported Manjaro Pinebook Pro KDE Plasma edition. One of the biggest gripes I have with KDE Plasma is that it doesn&amp;#8217;t automatically manage my OpenSSH and GPG keys. I&amp;#8217;m used to having my SSH and GPG key unlocked automatically when I login in. As a developer who uses these constantly, this is very convenient. KDE Plasma works very well on the Pinebook Pro, but this is one feature I just had to figure out. While I attempted to make this work with KWallet, I gave up and switched to using GNOME Keyring. If you wish to obtain this convenience within KDE then read on.</summary></entry><entry><title type="html">Create a Windows 10 USB on Ubuntu</title><link href="https://www.jwillikers.com/create-a-windows-10-usb-on-ubuntu" rel="alternate" type="text/html" title="Create a Windows 10 USB on Ubuntu" /><published>2020-12-11T00:00:00-06:00</published><updated>2020-12-11T00:00:00-06:00</updated><id>https://www.jwillikers.com/Create%20a%20Windows%2010%20USB%20on%20Ubuntu</id><content type="html" xml:base="https://www.jwillikers.com/create-a-windows-10-usb-on-ubuntu">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I needed a to install Windows 10 from a USB recently.
I&amp;#8217;ve described my preferred method of accomplishing this in my recent post &lt;a href=&quot;a-multi-boot-usb-with-ventoy.html&quot;&gt;A Multi-Boot USB With Ventoy&lt;/a&gt;.
Before I thought to use &lt;a href=&quot;https://www.ventoy.net/en/index.html&quot;&gt;Ventoy&lt;/a&gt;, I created such an installer following this nifty article &lt;a href=&quot;https://linuxhint.com/create-a-bootable-windows-10-usb-drive-in-linux/&quot;&gt;How to Create a Bootable Windows 10 USB Drive in Linux&lt;/a&gt;.
I was surprised by how simple it is do this using functionality built into &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; and &lt;a href=&quot;https://www.gnome.org/&quot;&gt;GNOME&lt;/a&gt;.
This made me curious.
How exactly do the underlying components function to do this?
So, I converted that tutorial to a command-line only version here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial documents the steps required to create a Windows 10 USB installer on &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 20.04 from the command-line.
As such, you should be familiar with Linux and the command-line to get the most out of this tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Insert a spare flash drive in to your computer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Locate the device associated with your USB by using the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/lsblk.8.html&quot;&gt;lsblk(8)&lt;/a&gt; command.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk
NAME             MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda                8:0    0 465.8G  0 disk
├─sda1             8:1    0   512M  0 part  /boot/efi
├─sda2             8:2    0     2G  0 part
│ └─cryptoswap   253:1    0     2G  0 crypt &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SWAP]
├─sda3             8:3    0     2G  0 part
└─sda4             8:4    0 461.3G  0 part
sdb                8:16   1  29.9G  0 disk &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
└─sdb1             8:17   1  29.9G  0 part  /media/jordan/MyUSB
zd0              230:0    0   500M  0 disk
└─keystore-rpool 253:0    0   484M  0 crypt /run/keystore/rpool&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;sdb&lt;/em&gt; here is the 32 Gigabyte flash drive I&amp;#8217;ve plugged in to my laptop.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before proceeding, ensure that nothing important is on the flash drive since it will be overwritten in a minute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount any mounted partitions on the flash drive.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As shown in the previous output, &lt;em&gt;sdb1&lt;/em&gt; is mounted at &lt;em&gt;/media/jordan/MyUSB&lt;/em&gt;.
I unmount this partition with the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man1/udisksctl.1.html&quot;&gt;udisksctl(1)&lt;/a&gt; command here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1 &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Unmounted /dev/sdb1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wipe any existing partition tables on the flash drive and generate a new one.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of &lt;em&gt;gdisk&lt;/em&gt; commands, consisting of &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/cgdisk.8.html&quot;&gt;cgdisk(8)&lt;/a&gt;, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/gdisk.8.html&quot;&gt;gdisk(8)&lt;/a&gt;, and &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/sgdisk.8.html&quot;&gt;sgdisk(8)&lt;/a&gt;, manipulate &lt;a href=&quot;https://en.wikipedia.org/wiki/GUID_Partition_Table&quot;&gt;GUID partition tables&lt;/a&gt;, also known as &lt;em&gt;GPTs&lt;/em&gt;.
Older &lt;a href=&quot;https://en.wikipedia.org/wiki/Master_boot_record&quot;&gt;master boot records&lt;/a&gt;, &lt;em&gt;MBRs&lt;/em&gt;, are instead managed with &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/fdisk.8.html&quot;&gt;fdisk(8)&lt;/a&gt; and its similarly named friends.
Here, the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/sgdisk.8.html&quot;&gt;sgdisk(8)&lt;/a&gt; command is used to partition the flash drive using the newer &lt;em&gt;GPT&lt;/em&gt; format without requiring any user interaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sgdisk &lt;span class=&quot;nt&quot;&gt;-Z&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 0:0:0 /dev/sdb
Creating new GPT entries &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;memory.
GPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
The operation has completed successfully.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;-Z&lt;/code&gt; flag &lt;em&gt;zaps&lt;/em&gt; any existing MBR and GPT partition tables into oblivion.
Then, the &lt;code&gt;-n&lt;/code&gt; flag creates a new partition given the partition number, starting sector, and ending sector separated by colons.
Zeros used here represent default values.
The first zero sets the partition number to the next available number, which is one since this is the first partition on the flash drive.
The next two zeros designate the starting sector of the largest block and the last sector of that same block, creating a single partition which effectively takes up the entirety of the flash drive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The program deceptively prints out what it does in the wrong order.
Just know that it does indeed wipe the existing MBR and GPT partitions before creating the new one.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format the partition as &lt;a href=&quot;https://en.wikipedia.org/wiki/NTFS&quot;&gt;NTFS&lt;/a&gt; with the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/mkntfs.8.html&quot;&gt;mkntfs(8)&lt;/a&gt; tool.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ mkntfs &lt;span class=&quot;nt&quot;&gt;-QL&lt;/span&gt; Windows10 /dev/sdb1
Cluster size has been automatically &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to 4096 bytes.
Creating NTFS volume structures.
mkntfs completed successfully. Have a &lt;span class=&quot;nb&quot;&gt;nice &lt;/span&gt;day.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the newly created partition with &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man1/udisksctl.1.html&quot;&gt;udisksctl(1)&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl mount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1 &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Mounted /dev/sdb1 at /media/jordan/Windows10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;a href=&quot;https://www.microsoft.com/en-gb/software-download/windows10ISO&quot;&gt;Windows 10 ISO&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the Windows 10 ISO in order to access its contents.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man1/gnome-disk-image-mounter.1.html&quot;&gt;gnome-disk-image-mounter(1)&lt;/a&gt; makes this a piece of cake and only requires a single argument, the path to the ISO file to mount.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ gnome-disk-image-mounter ~/Downloads/Win10_20H2_English_x64.iso&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/lsblk.8.html&quot;&gt;lsblk(8)&lt;/a&gt; again in order to find where the ISO is mounted.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk
NAME            MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
loop53            7:53   0   5.7G  1 loop  /media/jordan/CCCOMA_X64FRE_EN-US_DV9 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
sda               8:0    0 465.8G  0 disk
├─sda1            8:1    0   512M  0 part  /boot/efi
├─sda2            8:2    0     2G  0 part
│ └─cryptoswap  253:1    0     2G  0 crypt &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SWAP]
├─sda3            8:3    0     2G  0 part
└─sda4            8:4    0 461.3G  0 part
zd0             230:0    0   500M  0 disk
└─keystore-rpool
                253:0    0   484M  0 crypt /run/keystore/rpool&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Yep, that&amp;#8217;s the ISO file mounted as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Loop_device&quot;&gt;loop device&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy all files from the ISO to the flash drive.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /media/jordan/CCCOMA_X64FRE_EN-US_DV9/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /media/jordan/Windows10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the ISO.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/loop53 &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Unmounted /dev/loop53.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the flash drive.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/sdb1 &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Unmounted /dev/sdb1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now have a better idea of some of the underlying components at work when creating a Windows 10 USB installer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Or, use &lt;code&gt;sudo fdisk -l&lt;/code&gt; if you prefer.
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="Boot" /><category term="Disks" /><category term="gdisk" /><category term="GNOME" /><category term="gnome-disk-image-mounter" /><category term="Installer" /><category term="ISO" /><category term="Linux" /><category term="sgdisk" /><category term="Ubuntu" /><category term="Ubuntu2004" /><category term="udisks" /><category term="USB" /><category term="Windows" /><category term="Windows10" /><summary type="html">I needed a to install Windows 10 from a USB recently. I&amp;#8217;ve described my preferred method of accomplishing this in my recent post A Multi-Boot USB With Ventoy. Before I thought to use Ventoy, I created such an installer following this nifty article How to Create a Bootable Windows 10 USB Drive in Linux. I was surprised by how simple it is do this using functionality built into Ubuntu and GNOME. This made me curious. How exactly do the underlying components function to do this? So, I converted that tutorial to a command-line only version here.</summary></entry><entry><title type="html">A Multi-Boot USB With Ventoy</title><link href="https://www.jwillikers.com/a-multi-boot-usb-with-ventoy" rel="alternate" type="text/html" title="A Multi-Boot USB With Ventoy" /><published>2020-12-08T00:00:00-06:00</published><updated>2020-12-08T00:00:00-06:00</updated><id>https://www.jwillikers.com/A%20Multi-Boot%20USB%20With%20Ventoy</id><content type="html" xml:base="https://www.jwillikers.com/a-multi-boot-usb-with-ventoy">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My daily driver predates Dell&amp;#8217;s support for the &lt;a href=&quot;https://fwupd.org/&quot;&gt;Linux Vendor Firmware Service&lt;/a&gt;, usually abbreviated &lt;em&gt;LVFS&lt;/em&gt;.
The only way to update my motherboard&amp;#8217;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface#Das_U-Boot&quot;&gt;UEFI&lt;/a&gt; is through Windows, which I means I&amp;#8217;ll need a Windows 10 USB installer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Creating a USB installer on Ubuntu is typically as easy as opening &lt;a href=&quot;https://wiki.gnome.org/Apps/Disks&quot;&gt;GNOME Disks&lt;/a&gt;, selecting the desired USB disk, clicking &lt;b class=&quot;button&quot;&gt;Restore Disk Image&amp;#8230;&amp;#8203;&lt;/b&gt;, and selecting the ISO or image file.
Unfortunately, creating a Windows installer is not that simple.
The best solution for this has got to be &lt;a href=&quot;https://www.ventoy.net/&quot;&gt;Ventoy&lt;/a&gt;.
Not only does it support booting more that just a single operating system, it allows booting from as many disk images as you can cram on to your drive.
The &lt;a href=&quot;https://www.ventoy.net/en/isolist.html&quot;&gt;long list of tested images&lt;/a&gt; is also quite nice.
Runner ups include &lt;a href=&quot;https://linuxhint.com/create-a-bootable-windows-10-usb-drive-in-linux/&quot;&gt;GNOME Disks &lt;em&gt;plus workarounds&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/WoeUSB/WoeUSB-ng&quot;&gt;WoeUSB-ng&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ventoy is a project for booting any number of arbitrary ISO&amp;#8217;s off of a single flash drive.
Once a flash drive is set up, you can just drag and drop ISO images on to the flash drive and presto!
This tutorial is broken in to three parts, creating a Ventoy flash drive, adding an ISO image to it, and updating the Ventoy flash drive.
For reference, I use &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 20.04 here, but these options will work across many Linux distributions.
This tutorial assumes you are familiar with the command-line and Linux systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create_a_ventoy_flash_drive&quot;&gt;Create a Ventoy Flash Drive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is, of course, to setup the flash drive with Ventoy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Insert a flash drive in to your computer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Locate the device associated with your USB by using the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/lsblk.8.html&quot;&gt;lsblk(8)&lt;/a&gt; command.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk
NAME             MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda                8:0    0 465.8G  0 disk
├─sda1             8:1    0   512M  0 part  /boot/efi
├─sda2             8:2    0     2G  0 part
│ └─cryptoswap   253:1    0     2G  0 crypt &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SWAP]
├─sda3             8:3    0     2G  0 part
└─sda4             8:4    0 461.3G  0 part
sdb                8:16   1  29.9G  0 disk &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
zd0              230:0    0   500M  0 disk
└─keystore-rpool 253:0    0   484M  0 crypt /run/keystore/rpool&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;sdb&lt;/em&gt; here is the 32 Gigabyte flash drive I&amp;#8217;ve plugged in to my laptop.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that nothing important is on the flash drive since it will be overwritten in a minute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the latest release for Linux, available on &lt;a href=&quot;https://github.com/ventoy/Ventoy/releases&quot;&gt;Ventoy&amp;#8217;s GitHub Releases page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download the latest release directly from the command-line with the following command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://api.github.com/repos/ventoy/Ventoy/releases/latest &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;': '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/browser_download_url/ &amp;amp;&amp;amp; /\.tar\.gz/ \
  {gsub(/&quot;/, &quot;&quot;, $(NF)); system(&quot;wget -qi -L &quot; $(NF))}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man1/tar.1.html&quot;&gt;tar(1)&lt;/a&gt; command to extract the archive.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xf ventoy-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-linux&lt;/span&gt;.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Ventoy on the flash drive by running the &lt;code&gt;Ventoy2Disk.sh&lt;/code&gt; shell script as &lt;em&gt;root&lt;/em&gt;, passing the &lt;code&gt;-i&lt;/code&gt; flag and device.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since my target system uses UEFI, I include support for &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface#SECURE-BOOT&quot;&gt;secure boot&lt;/a&gt; with the &lt;code&gt;-s&lt;/code&gt; flag and use a &lt;a href=&quot;https://en.wikipedia.org/wiki/GUID_Partition_Table&quot;&gt;GUID partition table&lt;/a&gt; by passing the &lt;code&gt;-g&lt;/code&gt; flag.
When targeting systems using legacy &lt;a href=&quot;https://en.wikipedia.org/wiki/BIOS&quot;&gt;BIOS&lt;/a&gt; or depending on your target device, you may want to omit one or both of these flags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Some one-time setup, documented &lt;a href=&quot;https://www.ventoy.net/en/doc_secure.html&quot;&gt;here&lt;/a&gt;, is required for secure boot when booting the flash drive for the first time on a machine.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ventoy-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/Ventoy2Disk.sh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; /dev/sdb

&lt;span class=&quot;k&quot;&gt;**********************************************&lt;/span&gt;
      Ventoy: 1.0.31
      longpanda admin@ventoy.net
      https://www.ventoy.net
&lt;span class=&quot;k&quot;&gt;**********************************************&lt;/span&gt;

Disk : /dev/sdb
Model: Samsung Flash Drive FIT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;scsi&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Size : 29 GB
Style: GPT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When prompted, take a deep breath, read the message, double-check the device is correct, and type &lt;kbd&gt;Y&lt;/kbd&gt; if everything checks out and you still think this is a good idea.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;Attention:
You will &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Ventoy to /dev/sdb.
All the data on the disk /dev/sdb will be lost!!!

Continue? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; y&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat as necessary.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;All the data on the disk /dev/sdb will be lost!!!
Double-check. Continue? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; y

Create partitions on /dev/sdb by parted &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;GPT style ...
Done
mkfs on disk partitions ...
create efi fat fs /dev/sdb2 ...
mkfs.fat 4.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2017-01-24&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
success
mkexfatfs 1.3.0
Creating... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Flushing... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
File system created successfully.
writing data to disk ...
&lt;span class=&quot;nb&quot;&gt;sync &lt;/span&gt;data ...
esp partition processing ...

Install Ventoy to /dev/sdb successfully finished.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That&amp;#8217;s all that is required of the downloaded Ventoy files for this tutorial, so delete them if you like.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ventoy-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add_images&quot;&gt;Add Images&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that the flash drive has been configured, you just have to place any desired images on to the storage partition.
Here, I walk through each step necessary to add a Windows 10 ISO to the flash drive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;a href=&quot;https://www.microsoft.com/en-gb/software-download/windows10ISO&quot;&gt;Windows 10 ISO&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the Ventoy flash drive with the &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man1/udisksctl.1.html&quot;&gt;udisksctl(1)&lt;/a&gt; command.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually a USB drive is mounted automatically and you can skip this step.
If you&amp;#8217;ve just created the flash drive, you&amp;#8217;ll have to manually mount it.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;
If you are wondering whether it is mounted or not, well, the following command won&amp;#8217;t hurt.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Ventoy labels the storage partition on the USB drive &lt;em&gt;Ventoy&lt;/em&gt; and the boot partition &lt;em&gt;VTOYEFI&lt;/em&gt;.
Here, I mount the &lt;em&gt;Ventoy&lt;/em&gt; partition by label.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl mount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/disk/by-label/Ventoy &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Mounted /dev/sdb1 at /media/jordan/Ventoy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now just drag and drop the ISO in the &lt;em&gt;Ventoy&lt;/em&gt; partition or use &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man1/cp.1posix.html&quot;&gt;cp(1)&lt;/a&gt; as shown here.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unless Ventoy&amp;#8217;s label for the storage partition has been changed from its default, it will be mounted at &lt;em&gt;/media/$USER/Ventoy&lt;/em&gt;, where &lt;code&gt;$USER&lt;/code&gt; represents your username.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ~/Downloads/Win10_20H2_English_x64.iso /media/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/ventoy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before unplugging the flash drive, remember to unmount the filesystems.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Unmount the &lt;em&gt;Ventoy&lt;/em&gt; storage partition.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/disk/by-label/Ventoy &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Unmounted /dev/sdb1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the &lt;em&gt;VTOYEFI&lt;/em&gt; boot partition.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/disk/by-label/VTOYEFI &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Unmounted /dev/sdb2.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now remove the flash drive and it&amp;#8217;s ready for use!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ventoy regularly releases updates which may include bug fixes and new features.
Typically, minor updates can be applied to an existing Ventoy flash drive without erasing your ISO files on the USB drive.
These instructions explain how to go about updating a Ventoy flash drive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Plug the Ventoy flash drive in to your computer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the your flash drive with &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/man8/lsblk.8.html&quot;&gt;lsblk(8)&lt;/a&gt; command.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lsblk
NAME             MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda                8:0    0 465.8G  0 disk
├─sda1             8:1    0   512M  0 part  /boot/efi
├─sda2             8:2    0     2G  0 part
│ └─cryptoswap   253:1    0     2G  0 crypt &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SWAP]
├─sda3             8:3    0     2G  0 part
└─sda4             8:4    0 461.3G  0 part
sdb                8:16   1  29.9G  0 disk &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
├─sdb1             8:17   1  29.8G  0 part /media/jordan/Ventoy
└─sdb2             8:18   1    32M  0 part /media/jordan/VTOYEFI
zd0              230:0    0   500M  0 disk
└─keystore-rpool 253:0    0   484M  0 crypt /run/keystore/rpool&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;sdb&lt;/em&gt; here is the 32 Gigabyte Ventoy flash drive I&amp;#8217;ve plugged in to my laptop.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the latest release for Linux from &lt;a href=&quot;https://github.com/ventoy/Ventoy/releases&quot;&gt;Ventoy&amp;#8217;s GitHub Releases page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://api.github.com/repos/ventoy/Ventoy/releases/latest &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;': '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/browser_download_url/ &amp;amp;&amp;amp; /\.tar\.gz/ \
  {gsub(/&quot;/, &quot;&quot;, $(NF)); system(&quot;wget -qi -L &quot; $(NF))}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the archive with &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man1/tar.1.html&quot;&gt;tar(1)&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xf ventoy-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-linux&lt;/span&gt;.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the Ventoy flash drive by running the &lt;code&gt;Ventoy2Disk.sh&lt;/code&gt; shell script as root with the &lt;code&gt;-u&lt;/code&gt; flag and the path to the flash drive.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ventoy-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/Ventoy2Disk.sh &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; /dev/sdb

&lt;span class=&quot;k&quot;&gt;**********************************************&lt;/span&gt;
      Ventoy: 1.0.31
      longpanda admin@ventoy.net
      https://www.ventoy.net
&lt;span class=&quot;k&quot;&gt;**********************************************&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ventoy will prompt for confirmation after indicating whether the operation is safe or dangerous.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enter &lt;kbd&gt;Y&lt;/kbd&gt; to continue with the update.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;Upgrade operation is safe, all the data &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the 1st partition &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;iso files and other&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; will be unchanged!

Update Ventoy  1.0.30 &lt;span class=&quot;o&quot;&gt;===&amp;gt;&lt;/span&gt; 1.0.31   Continue? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;y

Update Ventoy to /dev/sdb successfully finished.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before unplugging the flash drive, remember to unmount the filesystems.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Unmount the &lt;em&gt;Ventoy&lt;/em&gt; storage partition.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/disk/by-label/Ventoy &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Unmounted /dev/sdb1.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the &lt;em&gt;VTOYEFI&lt;/em&gt; boot partition.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ udisksctl unmount &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /dev/disk/by-label/VTOYEFI &lt;span class=&quot;nt&quot;&gt;--no-user-interaction&lt;/span&gt;
Unmounted /dev/sdb2.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now remove the flash drive and it&amp;#8217;s ready for use again!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are finished with the downloaded Ventoy files, clean them up now.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ventoy-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ventoy is really, really helpful for booting all kinds of operating systems off of a single USB drive.
Take advantage of that increased disk space on flash drives now-a-days for storing more than just one image at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Or, use &lt;a href=&quot;https://manpages.ubuntu.com/manpages/focal/en/man8/fdisk.8.html&quot;&gt;fdisk(8)&lt;/a&gt;, via &lt;code&gt;sudo fdisk -l&lt;/code&gt;, if you prefer.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Or just unplug the flash drive and plug it back in.
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Disks" /><category term="Boot" /><category term="Disk" /><category term="GNOME" /><category term="Linux" /><category term="Installer" /><category term="ISO" /><category term="Ubuntu" /><category term="Ubuntu2004" /><category term="udisks" /><category term="USB" /><category term="Ventoy" /><category term="Windows" /><category term="Windows10" /><summary type="html">My daily driver predates Dell&amp;#8217;s support for the Linux Vendor Firmware Service, usually abbreviated LVFS. The only way to update my motherboard&amp;#8217;s UEFI is through Windows, which I means I&amp;#8217;ll need a Windows 10 USB installer.</summary></entry><entry><title type="html">Backup Git Repositories</title><link href="https://www.jwillikers.com/backup-git-repositories" rel="alternate" type="text/html" title="Backup Git Repositories" /><published>2020-12-07T00:00:00-06:00</published><updated>2020-12-07T00:00:00-06:00</updated><id>https://www.jwillikers.com/Backup%20Git%20Repositories</id><content type="html" xml:base="https://www.jwillikers.com/backup-git-repositories">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any source code repositories hosted online, you probably don&amp;#8217;t want to lose those.
Just yesterday I converted my professional resume from the &lt;a href=&quot;http://opendocumentformat.org/&quot;&gt;OpenDocument Format&lt;/a&gt; to a version controlled &lt;a href=&quot;https://asciidoctor.org/&quot;&gt;Asciidoctor&lt;/a&gt; project.
This prompted me to do an important task I&amp;#8217;d been putting off for some time, backing up my &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; repositories hosted on &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;.
Below is my solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reference system will of course be the latest &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; LTS, 20.04 at the time of this writing.
You will need to be familiar with Git and Unix shells.
The &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt; in particular is used here.
This tutorial will demonstrate how to automate these backups with &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the fish shell.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fish&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a backup directory for storing your Git repositories.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/Source&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create mirrors for each repository you wish to backup in this directory, making sure each repository&amp;#8217;s name is suffixed with &lt;em&gt;.git&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, I mirror this blog&amp;#8217;s repository in the &lt;em&gt;Source&lt;/em&gt; directory in my home folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ git clone &lt;span class=&quot;nt&quot;&gt;--mirror&lt;/span&gt; https://github.com/jwillikers/blog.git ~/Source/blog.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Place the following update script in &lt;em&gt;/etc/fish/functions&lt;/em&gt; where it will be autoloaded by fish.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/fish/functions/update_git_mirrors.fish&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;update_git_mirrors &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;For each directory given, non-recursively update each Git mirror repository directory suffixed with .git&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$argv&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;not &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;continue
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Argument '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' is not a directory&quot;&lt;/span&gt; 1&amp;gt;&amp;amp;2
    end

    &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mirror &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.git
      &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mirror&lt;/span&gt;
         git &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mirror&lt;/span&gt; remote update &lt;span class=&quot;nt&quot;&gt;--prune&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null
         &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Updated &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mirror&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      end
    end
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This script takes a number of directories as arguments.
Each of these directories is searched for directories ending with &lt;em&gt;.git&lt;/em&gt; in their name.
Each of these is treated as a Git mirror and updated appropriately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Placing the function definition in &lt;em&gt;/etc/fish/functions&lt;/em&gt; provides a stronger guarantee for reproducibility compared to placing the function in the user&amp;#8217;s directory &lt;em&gt;~/.config/fish/functions&lt;/em&gt;.
If you don&amp;#8217;t have root access or use &lt;a href=&quot;https://systemd.io/HOME_DIRECTORY/&quot;&gt;systemd-homed&lt;/a&gt; and want to migrate this function with your home directory, it makes more sense to place the function in &lt;em&gt;~/.config/fish/functions&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the script by executing &lt;code&gt;update_git_mirrors&lt;/code&gt; from within a fish shell.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since I use fish as my default shell, it&amp;#8217;s as easy as running the function directly from my shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ update_git_mirrors ~/Source
Updated /home/jordan/Source/blog.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don&amp;#8217;t use fish as your shell - and don&amp;#8217;t want to bother converting this code for your shell - you can test the function by calling it with &lt;code&gt;fish -c&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ fish &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'update_git_mirrors ~/Source'&lt;/span&gt;
Updated /home/jordan/Source/blog.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the systemd user configuration directory.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.config/systemd/user&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a systemd unit to refresh the mirrors.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/systemd/user/update-git-mirrors.service&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Update my Git mirrors

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;fish_function_path=/etc/fish/functions
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/fish -c 'update_git_mirrors /home/jordan/Source'
&lt;span class=&quot;nt&quot;&gt;Nice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;19
&lt;span class=&quot;nt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;oneshot

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;default.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command-line here calls the fish function just created, &lt;code&gt;update_git_mirrors&lt;/code&gt; to update the mirrors found in the directory &lt;em&gt;/home/jordan/Source&lt;/em&gt;.
The &lt;em&gt;Environment&lt;/em&gt; setting protects the function from being overloaded by a function of the same name placed in another autoloaded directory, such as the user&amp;#8217;s &lt;em&gt;~/.config/fish/functions&lt;/em&gt; directory.
Remove this line if you placed the function definition in the &lt;em&gt;~/.config/fish/functions&lt;/em&gt; directory instead of &lt;em&gt;/etc/fish/functions&lt;/em&gt;.
The &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Nice=&quot;&gt;&lt;em&gt;Nice&lt;/em&gt;&lt;/a&gt; directive designates a low scheduling priority, 14, for the CPU.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be aware of what protocols your repositories are using to authenticate when connecting to private repositories.
If you use SSH with an encrypted private key to access any private repositories, your key must be unlocked and available in your SSH agent before running this unit.
When using the timer described below, you will want your directory to automatically be unlocked at login for this to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configure a dedicated backup key with read-only access to your Git repositories for extra safety.
You could even use a dedicated user account for these backups to isolate this functionality, but I&amp;#8217;ve kept this simple for users that just want to get backups working.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test run the new systemd unit.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; start update-git-mirrors.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the output of the command to make sure everything worked.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; status update-git-mirrors.service
● update-git-mirrors.service - Update my Git mirrors
     Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/jordan/.config/systemd/user/update-git-mirrors.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; disabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     Active: inactive &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dead&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Dec 07 06:28:27 latitude fish[56735]: Updated /home/jordan/Source/blog.git
Dec 07 06:28:31 latitude systemd[4148]: update-git-mirrors.service: Succeeded.
Dec 07 06:28:31 latitude systemd[4148]: Finished Update my Git mirrors.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a systemd timer to update the mirrors every day.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/systemd/user/update-git-mirrors.timer&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;systemd&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;Regularly refresh my Git mirrors

&lt;span class=&quot;k&quot;&gt;[Timer]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Persistent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;true
&lt;span class=&quot;nt&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;daily

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;timers.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This timer has &lt;code&gt;Persistent=true&lt;/code&gt; to account for the situation when the timer would fire but the user has no session running.
When this happens, the timer will just fire the next time the user logs on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activate the timer automatically when logging in.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;update-git-mirrors.timer
Created symlink /home/jordan/.config/systemd/user/timers.target.wants/update-git-mirrors.timer → /home/jordan/.config/systemd/user/update-git-mirrors.timer.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check when your timer&amp;#8217;s schedule with the &lt;code&gt;systemctl --user list-timers&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ systemctl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; list-timers update-git-mirrors
NEXT                        LEFT     LAST PASSED UNIT                     ACTIVATES
Tue 2020-12-08 00:00:00 CST 16h left n/a  n/a    update-git-mirrors.timer update-git-mirrors.service

1 timers listed.
Pass &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; to see loaded but inactive timers, too.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above output indicates that the timer should fire for the first time tomorrow.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure to regularly verify that your backups are running properly.
Tools like &lt;a href=&quot;https://www.nagios.org/&quot;&gt;Nagios&lt;/a&gt; can make this monitoring easier.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now have a good idea as to how to go about backing up your Git repositories locally and automating the task with systemd.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. See the &lt;a href=&quot;https://fishshell.com/docs/current/#autoloading-functions&quot;&gt;Autoloading functions&lt;/a&gt; documentation for more details.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. &lt;a href=&quot;https://wiki.archlinux.org/index.php/Systemd/User#Basic_setup&quot;&gt;Arch Wiki: systemd/user - Basic Setup&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Systems" /><category term="Backup" /><category term="fish" /><category term="Git" /><category term="Linux" /><category term="SSH" /><category term="systemd" /><category term="Ubuntu" /><summary type="html">If you have any source code repositories hosted online, you probably don&amp;#8217;t want to lose those. Just yesterday I converted my professional resume from the OpenDocument Format to a version controlled Asciidoctor project. This prompted me to do an important task I&amp;#8217;d been putting off for some time, backing up my Git repositories hosted on GitHub. Below is my solution.</summary></entry><entry><title type="html">Snapping on the Pinebook Pro</title><link href="https://www.jwillikers.com/snapping-on-the-pinebook-pro" rel="alternate" type="text/html" title="Snapping on the Pinebook Pro" /><published>2020-12-05T00:00:00-06:00</published><updated>2020-12-05T00:00:00-06:00</updated><id>https://www.jwillikers.com/Snapping%20on%20the%20Pinebook%20Pro</id><content type="html" xml:base="https://www.jwillikers.com/snapping-on-the-pinebook-pro">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://snapcraft.io/about&quot;&gt;Snaps&lt;/a&gt; are an incredible new packaging format for Linux from &lt;a href=&quot;https://canonical.com/&quot;&gt;Canonical&lt;/a&gt;.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;
They offer application confinement and increased portability while also simplifying the development workflow.
Recently I submitted a &lt;a href=&quot;https://github.com/snapcrafters/sublime-merge/pull/5&quot;&gt;pull-request&lt;/a&gt; to extend the &lt;a href=&quot;https://github.com/snapcrafters/sublime-merge&quot;&gt;Sublime Merge snap&lt;/a&gt; with support for arm64 so that I could use it on my &lt;a href=&quot;https://www.pine64.org/pinebook-pro/&quot;&gt;Pinebook Pro&lt;/a&gt;.
Testing the snap locally required I figure out the process on the arm64 architecture.
There is a little bit of tweaking required as its still early days for this, but that&amp;#8217;s why I made this tutorial!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial is run on &lt;a href=&quot;https://linuxcontainers.org/&quot;&gt;Armbian&amp;#8217;s&lt;/a&gt; release of Ubuntu 20.04 Focal Fossa for the Pinebook Pro.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;
Your mileage may vary a little bit on other distributions.
You should be comfortable using the command-line on Linux, managing Unix group membership, executing privileged commands with &lt;a href=&quot;https://www.sudo.ws/&quot;&gt;Sudo&lt;/a&gt;, packaging and installing snaps, and obtaining source with &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;.
That was a mouthful, wasn&amp;#8217;t it?
If you made it this far you probably know all of that stuff anyways, so let&amp;#8217;s jump right into it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&quot;https://www.sudo.ws/&quot;&gt;Snapcraft&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--classic&lt;/span&gt; snapcraft&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s still early days for &lt;a href=&quot;https://linuxcontainers.org/lxd/&quot;&gt;LXD&lt;/a&gt; on the 64-bit ARM architecture, so install the latest candidate release.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lxd &lt;span class=&quot;nt&quot;&gt;--channel&lt;/span&gt; candidate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To avoid having to use root for LXD, add your user to the &lt;em&gt;lxd&lt;/em&gt; group.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-G&lt;/span&gt; lxd &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Only place users you trust with root access in the &lt;em&gt;lxd&lt;/em&gt; group.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that LXD is installed, it must be initialized.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ lxd init &lt;span class=&quot;nt&quot;&gt;--auto&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the snapcraft YAML file for an application that supports building on the &lt;em&gt;arm64&lt;/em&gt; architecture, such as the &lt;a href=&quot;https://github.com/ubuntu-core/hello-snapcraftio&quot;&gt;hello-snapcraftio&lt;/a&gt; example project.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ git clone https://github.com/ubuntu-core/hello-snapcraftio.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change into the project root or the directory containing the Snapcraft YAML file, usually located in a &lt;em&gt;snap&lt;/em&gt; directory.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hello-snapcraftio&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build the snap, using LXD to drive the containers.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ snapcraft &lt;span class=&quot;nt&quot;&gt;--use-lxd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Snapcraft usually manages containers with &lt;a href=&quot;https://multipass.run&quot;&gt;Multipass&lt;/a&gt;.
Unfortunately, Multipass has outstanding issues on the 64-bit ARM architecture.
This can be worked around by using LXD to handle the underlying containers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you run into issues with LXD here, you might try a good old fashioned restart.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, install the &lt;em&gt;.snap&lt;/em&gt; file created in the current directory by the previous command.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--devmode&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--dangerous&lt;/span&gt; hello_&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.snap
hello 2.10 installed&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And the magic moment, run your new snap!&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ snap run hello
Hello, world!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To clean things up, remove the &lt;em&gt;hello&lt;/em&gt; snap.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;➜ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap remove hello&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you know how to get up and running with building your snap packages locally on a 64-bit ARM device.
Happy snapping!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Yes, &lt;a href=&quot;https://flatpak.org/&quot;&gt;Flatpaks&lt;/a&gt; are great too.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. This isn&amp;#8217;t legitimate Ubuntu, as the kernel is maintained by the Armbian project, fyi.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. &lt;a href=&quot;https://github.com/lxc/lxd#security&quot;&gt;LXD README: Security&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jordan Williams</name></author><category term="Packaging" /><category term="arm64" /><category term="Armbian" /><category term="Linux" /><category term="LXC" /><category term="PinebookPro" /><category term="Snapcraft" /><category term="Ubuntu" /><summary type="html">Snaps are an incredible new packaging format for Linux from Canonical.[1] They offer application confinement and increased portability while also simplifying the development workflow. Recently I submitted a pull-request to extend the Sublime Merge snap with support for arm64 so that I could use it on my Pinebook Pro. Testing the snap locally required I figure out the process on the arm64 architecture. There is a little bit of tweaking required as its still early days for this, but that&amp;#8217;s why I made this tutorial! 1. Yes, Flatpaks are great too.</summary></entry></feed>